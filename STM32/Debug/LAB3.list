
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d64  08002d64  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002d64  08002d64  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d64  08002d64  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d68  08002d68  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002d6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000048  08002db4  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002db4  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009201  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a57  00000000  00000000  00029272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002b710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168db  00000000  00000000  0002c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b29c  00000000  00000000  00042933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fa8  00000000  00000000  0004dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfb77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a0  00000000  00000000  000cfbcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d28 	.word	0x08002d28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	08002d28 	.word	0x08002d28

0800014c <sevenledsetA>:
 *  Created on: Oct 28, 2025
 *      Author: THINH
 */
#include "7segled.h"
void sevenledsetA(int value)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8094 	bhi.w	8000284 <sevenledsetA+0x138>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <sevenledsetA+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001a7 	.word	0x080001a7
 800016c:	080001c1 	.word	0x080001c1
 8000170:	080001db 	.word	0x080001db
 8000174:	080001f5 	.word	0x080001f5
 8000178:	0800020f 	.word	0x0800020f
 800017c:	08000229 	.word	0x08000229
 8000180:	08000243 	.word	0x08000243
 8000184:	0800025d 	.word	0x0800025d
 8000188:	0800026b 	.word	0x0800026b
	switch(value)
	{
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000192:	4845      	ldr	r0, [pc, #276]	; (80002a8 <sevenledsetA+0x15c>)
 8000194:	f001 fda7 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019e:	4842      	ldr	r0, [pc, #264]	; (80002a8 <sevenledsetA+0x15c>)
 80001a0:	f001 fda1 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 80001a4:	e07b      	b.n	800029e <sevenledsetA+0x152>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80001ac:	483e      	ldr	r0, [pc, #248]	; (80002a8 <sevenledsetA+0x15c>)
 80001ae:	f001 fd9a 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 80001b8:	483b      	ldr	r0, [pc, #236]	; (80002a8 <sevenledsetA+0x15c>)
 80001ba:	f001 fd94 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 80001be:	e06e      	b.n	800029e <sevenledsetA+0x152>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 80001c6:	4838      	ldr	r0, [pc, #224]	; (80002a8 <sevenledsetA+0x15c>)
 80001c8:	f001 fd8d 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9 | GPIO_PIN_12, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80001d2:	4835      	ldr	r0, [pc, #212]	; (80002a8 <sevenledsetA+0x15c>)
 80001d4:	f001 fd87 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 80001d8:	e061      	b.n	800029e <sevenledsetA+0x152>
		case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 80001e0:	4831      	ldr	r0, [pc, #196]	; (80002a8 <sevenledsetA+0x15c>)
 80001e2:	f001 fd80 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_SET); 
 80001e6:	2201      	movs	r2, #1
 80001e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80001ec:	482e      	ldr	r0, [pc, #184]	; (80002a8 <sevenledsetA+0x15c>)
 80001ee:	f001 fd7a 	bl	8001ce6 <HAL_GPIO_WritePin>
			break; 
 80001f2:	e054      	b.n	800029e <sevenledsetA+0x152>
		case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80001fa:	482b      	ldr	r0, [pc, #172]	; (80002a8 <sevenledsetA+0x15c>)
 80001fc:	f001 fd73 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000206:	4828      	ldr	r0, [pc, #160]	; (80002a8 <sevenledsetA+0x15c>)
 8000208:	f001 fd6d 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 800020c:	e047      	b.n	800029e <sevenledsetA+0x152>
		case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000214:	4824      	ldr	r0, [pc, #144]	; (80002a8 <sevenledsetA+0x15c>)
 8000216:	f001 fd66 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_11, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000220:	4821      	ldr	r0, [pc, #132]	; (80002a8 <sevenledsetA+0x15c>)
 8000222:	f001 fd60 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 8000226:	e03a      	b.n	800029e <sevenledsetA+0x152>
		case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800022e:	481e      	ldr	r0, [pc, #120]	; (80002a8 <sevenledsetA+0x15c>)
 8000230:	f001 fd59 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023a:	481b      	ldr	r0, [pc, #108]	; (80002a8 <sevenledsetA+0x15c>)
 800023c:	f001 fd53 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 8000240:	e02d      	b.n	800029e <sevenledsetA+0x152>
		case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000248:	4817      	ldr	r0, [pc, #92]	; (80002a8 <sevenledsetA+0x15c>)
 800024a:	f001 fd4c 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000254:	4814      	ldr	r0, [pc, #80]	; (80002a8 <sevenledsetA+0x15c>)
 8000256:	f001 fd46 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 800025a:	e020      	b.n	800029e <sevenledsetA+0x152>
		case 8:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000262:	4811      	ldr	r0, [pc, #68]	; (80002a8 <sevenledsetA+0x15c>)
 8000264:	f001 fd3f 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 8000268:	e019      	b.n	800029e <sevenledsetA+0x152>
		case 9:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <sevenledsetA+0x15c>)
 8000272:	f001 fd38 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027c:	480a      	ldr	r0, [pc, #40]	; (80002a8 <sevenledsetA+0x15c>)
 800027e:	f001 fd32 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 8000282:	e00c      	b.n	800029e <sevenledsetA+0x152>
		default:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800028a:	4807      	ldr	r0, [pc, #28]	; (80002a8 <sevenledsetA+0x15c>)
 800028c:	f001 fd2b 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7 | GPIO_PIN_13, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <sevenledsetA+0x15c>)
 8000298:	f001 fd25 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 800029c:	bf00      	nop
	}
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40010800 	.word	0x40010800

080002ac <sevenledsetB>:

void sevenledsetB(int value)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2b09      	cmp	r3, #9
 80002b8:	f200 8094 	bhi.w	80003e4 <sevenledsetB+0x138>
 80002bc:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <sevenledsetB+0x18>)
 80002be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c2:	bf00      	nop
 80002c4:	080002ed 	.word	0x080002ed
 80002c8:	08000307 	.word	0x08000307
 80002cc:	08000321 	.word	0x08000321
 80002d0:	0800033b 	.word	0x0800033b
 80002d4:	08000355 	.word	0x08000355
 80002d8:	0800036f 	.word	0x0800036f
 80002dc:	08000389 	.word	0x08000389
 80002e0:	080003a3 	.word	0x080003a3
 80002e4:	080003bd 	.word	0x080003bd
 80002e8:	080003cb 	.word	0x080003cb
	switch(value)
	{
		case 0:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80002f2:	4845      	ldr	r0, [pc, #276]	; (8000408 <sevenledsetB+0x15c>)
 80002f4:	f001 fcf7 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	4842      	ldr	r0, [pc, #264]	; (8000408 <sevenledsetB+0x15c>)
 8000300:	f001 fcf1 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 8000304:	e07b      	b.n	80003fe <sevenledsetB+0x152>
		case 1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7140 	mov.w	r1, #768	; 0x300
 800030c:	483e      	ldr	r0, [pc, #248]	; (8000408 <sevenledsetB+0x15c>)
 800030e:	f001 fcea 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 8000318:	483b      	ldr	r0, [pc, #236]	; (8000408 <sevenledsetB+0x15c>)
 800031a:	f001 fce4 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 800031e:	e06e      	b.n	80003fe <sevenledsetB+0x152>
		case 2:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 8000326:	4838      	ldr	r0, [pc, #224]	; (8000408 <sevenledsetB+0x15c>)
 8000328:	f001 fcdd 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9 | GPIO_PIN_12, GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000332:	4835      	ldr	r0, [pc, #212]	; (8000408 <sevenledsetB+0x15c>)
 8000334:	f001 fcd7 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 8000338:	e061      	b.n	80003fe <sevenledsetB+0x152>
		case 3:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_13, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8000340:	4831      	ldr	r0, [pc, #196]	; (8000408 <sevenledsetB+0x15c>)
 8000342:	f001 fcd0 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_SET); 
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800034c:	482e      	ldr	r0, [pc, #184]	; (8000408 <sevenledsetB+0x15c>)
 800034e:	f001 fcca 	bl	8001ce6 <HAL_GPIO_WritePin>
			break; 
 8000352:	e054      	b.n	80003fe <sevenledsetB+0x152>
		case 4:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 800035a:	482b      	ldr	r0, [pc, #172]	; (8000408 <sevenledsetB+0x15c>)
 800035c:	f001 fcc3 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_10 | GPIO_PIN_11, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000366:	4828      	ldr	r0, [pc, #160]	; (8000408 <sevenledsetB+0x15c>)
 8000368:	f001 fcbd 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 800036c:	e047      	b.n	80003fe <sevenledsetB+0x152>
		case 5:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000374:	4824      	ldr	r0, [pc, #144]	; (8000408 <sevenledsetB+0x15c>)
 8000376:	f001 fcb6 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_11, GPIO_PIN_SET);
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000380:	4821      	ldr	r0, [pc, #132]	; (8000408 <sevenledsetB+0x15c>)
 8000382:	f001 fcb0 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 8000386:	e03a      	b.n	80003fe <sevenledsetB+0x152>
		case 6:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800038e:	481e      	ldr	r0, [pc, #120]	; (8000408 <sevenledsetB+0x15c>)
 8000390:	f001 fca9 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039a:	481b      	ldr	r0, [pc, #108]	; (8000408 <sevenledsetB+0x15c>)
 800039c:	f001 fca3 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 80003a0:	e02d      	b.n	80003fe <sevenledsetB+0x152>
		case 7:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 7160 	mov.w	r1, #896	; 0x380
 80003a8:	4817      	ldr	r0, [pc, #92]	; (8000408 <sevenledsetB+0x15c>)
 80003aa:	f001 fc9c 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80003b4:	4814      	ldr	r0, [pc, #80]	; (8000408 <sevenledsetB+0x15c>)
 80003b6:	f001 fc96 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 80003ba:	e020      	b.n	80003fe <sevenledsetB+0x152>
		case 8:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80003c2:	4811      	ldr	r0, [pc, #68]	; (8000408 <sevenledsetB+0x15c>)
 80003c4:	f001 fc8f 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 80003c8:	e019      	b.n	80003fe <sevenledsetB+0x152>
		case 9:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80003d0:	480d      	ldr	r0, [pc, #52]	; (8000408 <sevenledsetB+0x15c>)
 80003d2:	f001 fc88 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003dc:	480a      	ldr	r0, [pc, #40]	; (8000408 <sevenledsetB+0x15c>)
 80003de:	f001 fc82 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 80003e2:	e00c      	b.n	80003fe <sevenledsetB+0x152>
		default:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <sevenledsetB+0x15c>)
 80003ec:	f001 fc7b 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7 | GPIO_PIN_13, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <sevenledsetB+0x15c>)
 80003f8:	f001 fc75 	bl	8001ce6 <HAL_GPIO_WritePin>
			break;
 80003fc:	bf00      	nop
	}
}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40010c00 	.word	0x40010c00

0800040c <SubKeyProcess>:
static int KeyReg2 = 1;
static int KeyReg3 = 1;
static int Timerforkeypressed = 200;
int button0_trigger = 0;
static void SubKeyProcess()
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	button0_trigger = 1;
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <SubKeyProcess+0x14>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000064 	.word	0x20000064

08000424 <GetkeyInput0>:

void GetkeyInput0()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <GetkeyInput0+0x84>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <GetkeyInput0+0x88>)
 800042e:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <GetkeyInput0+0x8c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <GetkeyInput0+0x84>)
 8000436:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	481d      	ldr	r0, [pc, #116]	; (80004b4 <GetkeyInput0+0x90>)
 800043e:	f001 fc3b 	bl	8001cb8 <HAL_GPIO_ReadPin>
 8000442:	4603      	mov	r3, r0
 8000444:	461a      	mov	r2, r3
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <GetkeyInput0+0x8c>)
 8000448:	601a      	str	r2, [r3, #0]
	if (KeyReg0 == KeyReg1 && KeyReg1 == KeyReg2)
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <GetkeyInput0+0x88>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <GetkeyInput0+0x84>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	429a      	cmp	r2, r3
 8000454:	d125      	bne.n	80004a2 <GetkeyInput0+0x7e>
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <GetkeyInput0+0x84>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <GetkeyInput0+0x8c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	429a      	cmp	r2, r3
 8000460:	d11f      	bne.n	80004a2 <GetkeyInput0+0x7e>
	{
		if (KeyReg3 != KeyReg2)
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <GetkeyInput0+0x94>)
 8000464:	681a      	ldr	r2, [r3, #0]
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <GetkeyInput0+0x8c>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	429a      	cmp	r2, r3
 800046c:	d00d      	beq.n	800048a <GetkeyInput0+0x66>
		{
			KeyReg3 = KeyReg2;
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <GetkeyInput0+0x8c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <GetkeyInput0+0x94>)
 8000474:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == 0)
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <GetkeyInput0+0x8c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d111      	bne.n	80004a2 <GetkeyInput0+0x7e>
			{
				SubKeyProcess();
 800047e:	f7ff ffc5 	bl	800040c <SubKeyProcess>
				Timerforkeypressed = 200;
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <GetkeyInput0+0x98>)
 8000484:	22c8      	movs	r2, #200	; 0xc8
 8000486:	601a      	str	r2, [r3, #0]
			}
		}
			
	}
	
}
 8000488:	e00b      	b.n	80004a2 <GetkeyInput0+0x7e>
			Timerforkeypressed--;
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <GetkeyInput0+0x98>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3b01      	subs	r3, #1
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <GetkeyInput0+0x98>)
 8000492:	6013      	str	r3, [r2, #0]
			if (Timerforkeypressed == 0)
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <GetkeyInput0+0x98>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d102      	bne.n	80004a2 <GetkeyInput0+0x7e>
				Timerforkeypressed = 200;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <GetkeyInput0+0x98>)
 800049e:	22c8      	movs	r2, #200	; 0xc8
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000004 	.word	0x20000004
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000008 	.word	0x20000008
 80004b4:	40011000 	.word	0x40011000
 80004b8:	2000000c 	.word	0x2000000c
 80004bc:	20000010 	.word	0x20000010

080004c0 <SubKeyProcess>:

int button1_trigger = 0;
int button1_trigger_long = 0;

static void SubKeyProcess()
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	button1_trigger = 1;
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <SubKeyProcess+0x14>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000068 	.word	0x20000068

080004d8 <SubKeyProcessLong>:
static void SubKeyProcessLong()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	button1_trigger_long = 1;
 80004dc:	4b03      	ldr	r3, [pc, #12]	; (80004ec <SubKeyProcessLong+0x14>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000006c 	.word	0x2000006c

080004f0 <GetkeyInput1>:
void GetkeyInput1()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80004f4:	4b27      	ldr	r3, [pc, #156]	; (8000594 <GetkeyInput1+0xa4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a27      	ldr	r2, [pc, #156]	; (8000598 <GetkeyInput1+0xa8>)
 80004fa:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <GetkeyInput1+0xac>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a24      	ldr	r2, [pc, #144]	; (8000594 <GetkeyInput1+0xa4>)
 8000502:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8000504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000508:	4825      	ldr	r0, [pc, #148]	; (80005a0 <GetkeyInput1+0xb0>)
 800050a:	f001 fbd5 	bl	8001cb8 <HAL_GPIO_ReadPin>
 800050e:	4603      	mov	r3, r0
 8000510:	461a      	mov	r2, r3
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <GetkeyInput1+0xac>)
 8000514:	601a      	str	r2, [r3, #0]
	if (KeyReg0 == KeyReg1 && KeyReg1 == KeyReg2)
 8000516:	4b20      	ldr	r3, [pc, #128]	; (8000598 <GetkeyInput1+0xa8>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <GetkeyInput1+0xa4>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	429a      	cmp	r2, r3
 8000520:	d136      	bne.n	8000590 <GetkeyInput1+0xa0>
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <GetkeyInput1+0xa4>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <GetkeyInput1+0xac>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	429a      	cmp	r2, r3
 800052c:	d130      	bne.n	8000590 <GetkeyInput1+0xa0>
	{
		if(KeyReg3 != KeyReg2)
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <GetkeyInput1+0xb4>)
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <GetkeyInput1+0xac>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d00d      	beq.n	8000556 <GetkeyInput1+0x66>
		{
			KeyReg3 = KeyReg2;
 800053a:	4b18      	ldr	r3, [pc, #96]	; (800059c <GetkeyInput1+0xac>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <GetkeyInput1+0xb4>)
 8000540:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == 0)
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <GetkeyInput1+0xac>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d117      	bne.n	800057a <GetkeyInput1+0x8a>
			{
				SubKeyProcess();
 800054a:	f7ff ffb9 	bl	80004c0 <SubKeyProcess>
				Timerforkeypressed = 100;			 
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <GetkeyInput1+0xb8>)
 8000550:	2264      	movs	r2, #100	; 0x64
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e011      	b.n	800057a <GetkeyInput1+0x8a>
			}
		}
		else
		{
			Timerforkeypressed--;
 8000556:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <GetkeyInput1+0xb8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3b01      	subs	r3, #1
 800055c:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <GetkeyInput1+0xb8>)
 800055e:	6013      	str	r3, [r2, #0]
			if (Timerforkeypressed == 0)
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <GetkeyInput1+0xb8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d108      	bne.n	800057a <GetkeyInput1+0x8a>
			{
				if (KeyReg2 == 0)
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <GetkeyInput1+0xac>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d101      	bne.n	8000574 <GetkeyInput1+0x84>
				{
					SubKeyProcessLong();
 8000570:	f7ff ffb2 	bl	80004d8 <SubKeyProcessLong>
				}
				Timerforkeypressed = 100;						 
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <GetkeyInput1+0xb8>)
 8000576:	2264      	movs	r2, #100	; 0x64
 8000578:	601a      	str	r2, [r3, #0]
			}
		}
		if (KeyReg2 == 1 && button1_trigger_long == 1)
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <GetkeyInput1+0xac>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d106      	bne.n	8000590 <GetkeyInput1+0xa0>
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <GetkeyInput1+0xbc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d102      	bne.n	8000590 <GetkeyInput1+0xa0>
		{
			button1_trigger_long = 0;
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <GetkeyInput1+0xbc>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000018 	.word	0x20000018
 8000598:	20000014 	.word	0x20000014
 800059c:	2000001c 	.word	0x2000001c
 80005a0:	40011000 	.word	0x40011000
 80005a4:	20000020 	.word	0x20000020
 80005a8:	20000024 	.word	0x20000024
 80005ac:	2000006c 	.word	0x2000006c

080005b0 <SubKeyProcess>:
static int KeyReg2 = 1;
static int KeyReg3 = 1;
static int Timerforkeypressed = 200;
int button2_trigger = 0;
static void SubKeyProcess()
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	button2_trigger = 1;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <SubKeyProcess+0x14>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000070 	.word	0x20000070

080005c8 <GetkeyInput2>:

void GetkeyInput2()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <GetkeyInput2+0x84>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <GetkeyInput2+0x88>)
 80005d2:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <GetkeyInput2+0x8c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <GetkeyInput2+0x84>)
 80005da:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	481d      	ldr	r0, [pc, #116]	; (8000658 <GetkeyInput2+0x90>)
 80005e2:	f001 fb69 	bl	8001cb8 <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <GetkeyInput2+0x8c>)
 80005ec:	601a      	str	r2, [r3, #0]
	if (KeyReg0 == KeyReg1 && KeyReg1 == KeyReg2)
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <GetkeyInput2+0x88>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <GetkeyInput2+0x84>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d125      	bne.n	8000646 <GetkeyInput2+0x7e>
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <GetkeyInput2+0x84>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <GetkeyInput2+0x8c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	429a      	cmp	r2, r3
 8000604:	d11f      	bne.n	8000646 <GetkeyInput2+0x7e>
	{
		if(KeyReg3 != KeyReg2)
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <GetkeyInput2+0x94>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <GetkeyInput2+0x8c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	429a      	cmp	r2, r3
 8000610:	d00d      	beq.n	800062e <GetkeyInput2+0x66>
		{
			KeyReg3 = KeyReg2;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <GetkeyInput2+0x8c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a11      	ldr	r2, [pc, #68]	; (800065c <GetkeyInput2+0x94>)
 8000618:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == 0)
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <GetkeyInput2+0x8c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d111      	bne.n	8000646 <GetkeyInput2+0x7e>
			{
				SubKeyProcess();
 8000622:	f7ff ffc5 	bl	80005b0 <SubKeyProcess>
				Timerforkeypressed = 200;			 
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <GetkeyInput2+0x98>)
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	601a      	str	r2, [r3, #0]
				Timerforkeypressed = 200;						 
			}
		}
	}
	
}
 800062c:	e00b      	b.n	8000646 <GetkeyInput2+0x7e>
			Timerforkeypressed--;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <GetkeyInput2+0x98>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3b01      	subs	r3, #1
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <GetkeyInput2+0x98>)
 8000636:	6013      	str	r3, [r2, #0]
			if (Timerforkeypressed == 0)
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <GetkeyInput2+0x98>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d102      	bne.n	8000646 <GetkeyInput2+0x7e>
				Timerforkeypressed = 200;						 
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <GetkeyInput2+0x98>)
 8000642:	22c8      	movs	r2, #200	; 0xc8
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000002c 	.word	0x2000002c
 8000650:	20000028 	.word	0x20000028
 8000654:	20000030 	.word	0x20000030
 8000658:	40011000 	.word	0x40011000
 800065c:	20000034 	.word	0x20000034
 8000660:	20000038 	.word	0x20000038

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08e      	sub	sp, #56	; 0x38
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f001 f83b 	bl	80016e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 fd97 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 fe1d 	bl	80012b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000676:	f000 fdcf 	bl	8001218 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  
	HAL_TIM_Base_Start_IT(&htim2);
 800067a:	48bd      	ldr	r0, [pc, #756]	; (8000970 <main+0x30c>)
 800067c:	f001 ff90 	bl	80025a0 <HAL_TIM_Base_Start_IT>
	int tempvalue;
	int ledswitchingflag = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
	int mode = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
	int OnStartUp1 = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
	int OnStartUp2 = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
	int OnStartUp3 = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
	int OnStartUp4 = 1;
 8000694:	2301      	movs	r3, #1
 8000696:	61fb      	str	r3, [r7, #28]
	int trafficlightred = 5;
 8000698:	2305      	movs	r3, #5
 800069a:	61bb      	str	r3, [r7, #24]
	int trafficlightyellow = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
	int trafficlightgreen = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	613b      	str	r3, [r7, #16]
	int status1 = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
	int status2 = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	60bb      	str	r3, [r7, #8]
	int value7A = trafficlightred;
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	607b      	str	r3, [r7, #4]
	int value7B = trafficlightgreen;
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	603b      	str	r3, [r7, #0]
	sevenledsetA(value7A%10);
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4baf      	ldr	r3, [pc, #700]	; (8000974 <main+0x310>)
 80006b8:	fb83 1302 	smull	r1, r3, r3, r2
 80006bc:	1099      	asrs	r1, r3, #2
 80006be:	17d3      	asrs	r3, r2, #31
 80006c0:	1ac9      	subs	r1, r1, r3
 80006c2:	460b      	mov	r3, r1
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	440b      	add	r3, r1
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	1ad1      	subs	r1, r2, r3
 80006cc:	4608      	mov	r0, r1
 80006ce:	f7ff fd3d 	bl	800014c <sevenledsetA>
	sevenledsetB(value7B%10);
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	4ba7      	ldr	r3, [pc, #668]	; (8000974 <main+0x310>)
 80006d6:	fb83 1302 	smull	r1, r3, r3, r2
 80006da:	1099      	asrs	r1, r3, #2
 80006dc:	17d3      	asrs	r3, r2, #31
 80006de:	1ac9      	subs	r1, r1, r3
 80006e0:	460b      	mov	r3, r1
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	440b      	add	r3, r1
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	1ad1      	subs	r1, r2, r3
 80006ea:	4608      	mov	r0, r1
 80006ec:	f7ff fdde 	bl	80002ac <sevenledsetB>
	
	setTimer0(100);
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f000 fe6d 	bl	80013d0 <setTimer0>
	setTimer1(trafficlightred*100);
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	2264      	movs	r2, #100	; 0x64
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fe94 	bl	800142c <setTimer1>
	setTimer2(trafficlightgreen*100);
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	2264      	movs	r2, #100	; 0x64
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 febb 	bl	8001488 <setTimer2>
	setTimer3(100);
 8000712:	2064      	movs	r0, #100	; 0x64
 8000714:	f000 fee6 	bl	80014e4 <setTimer3>
	setTimer4(100);
 8000718:	2064      	movs	r0, #100	; 0x64
 800071a:	f000 ff11 	bl	8001540 <setTimer4>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000724:	4894      	ldr	r0, [pc, #592]	; (8000978 <main+0x314>)
 8000726:	f001 fade 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000730:	4891      	ldr	r0, [pc, #580]	; (8000978 <main+0x314>)
 8000732:	f001 fad8 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073c:	488f      	ldr	r0, [pc, #572]	; (800097c <main+0x318>)
 800073e:	f001 fad2 	bl	8001ce6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000748:	488c      	ldr	r0, [pc, #560]	; (800097c <main+0x318>)
 800074a:	f001 facc 	bl	8001ce6 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (button0_trigger == 1)
 800074e:	4b8c      	ldr	r3, [pc, #560]	; (8000980 <main+0x31c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d11e      	bne.n	8000794 <main+0x130>
	{
		button0_trigger = 0;
 8000756:	4b8a      	ldr	r3, [pc, #552]	; (8000980 <main+0x31c>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
		mode++;
 800075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075e:	3301      	adds	r3, #1
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (mode > 4) mode = 1;
 8000762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000764:	2b04      	cmp	r3, #4
 8000766:	dd01      	ble.n	800076c <main+0x108>
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (mode == 2) OnStartUp2 = 1;
 800076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076e:	2b02      	cmp	r3, #2
 8000770:	d101      	bne.n	8000776 <main+0x112>
 8000772:	2301      	movs	r3, #1
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
		if (mode == 3) OnStartUp3 = 1;
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	2b03      	cmp	r3, #3
 800077a:	d101      	bne.n	8000780 <main+0x11c>
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
		if (mode == 4) OnStartUp4 = 1;
 8000780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000782:	2b04      	cmp	r3, #4
 8000784:	d101      	bne.n	800078a <main+0x126>
 8000786:	2301      	movs	r3, #1
 8000788:	61fb      	str	r3, [r7, #28]
		if (mode == 1) OnStartUp1 = 1;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078c:	2b01      	cmp	r3, #1
 800078e:	d101      	bne.n	8000794 <main+0x130>
 8000790:	2301      	movs	r3, #1
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	if (mode == 1)
 8000794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000796:	2b01      	cmp	r3, #1
 8000798:	f040 825d 	bne.w	8000c56 <main+0x5f2>
	{
		if (OnStartUp1)
 800079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d056      	beq.n	8000850 <main+0x1ec>
		{
			OnStartUp1 = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
			status1 = 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
			status2 = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	60bb      	str	r3, [r7, #8]
			value7A = trafficlightred;
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	607b      	str	r3, [r7, #4]
			value7B = trafficlightgreen;
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	603b      	str	r3, [r7, #0]
			sevenledsetA(value7A%10);
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4b6e      	ldr	r3, [pc, #440]	; (8000974 <main+0x310>)
 80007ba:	fb83 1302 	smull	r1, r3, r3, r2
 80007be:	1099      	asrs	r1, r3, #2
 80007c0:	17d3      	asrs	r3, r2, #31
 80007c2:	1ac9      	subs	r1, r1, r3
 80007c4:	460b      	mov	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	440b      	add	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	1ad1      	subs	r1, r2, r3
 80007ce:	4608      	mov	r0, r1
 80007d0:	f7ff fcbc 	bl	800014c <sevenledsetA>
			sevenledsetB(value7B%10);	
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	4b67      	ldr	r3, [pc, #412]	; (8000974 <main+0x310>)
 80007d8:	fb83 1302 	smull	r1, r3, r3, r2
 80007dc:	1099      	asrs	r1, r3, #2
 80007de:	17d3      	asrs	r3, r2, #31
 80007e0:	1ac9      	subs	r1, r1, r3
 80007e2:	460b      	mov	r3, r1
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	1ad1      	subs	r1, r2, r3
 80007ec:	4608      	mov	r0, r1
 80007ee:	f7ff fd5d 	bl	80002ac <sevenledsetB>
			
			setTimer0(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f000 fdec 	bl	80013d0 <setTimer0>
			setTimer1(trafficlightred*100);
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	2264      	movs	r2, #100	; 0x64
 80007fc:	fb02 f303 	mul.w	r3, r2, r3
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fe13 	bl	800142c <setTimer1>
			setTimer2(trafficlightgreen*100);
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	2264      	movs	r2, #100	; 0x64
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fe3a 	bl	8001488 <setTimer2>
			setTimer3(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f000 fe65 	bl	80014e4 <setTimer3>
			setTimer4(100);
 800081a:	2064      	movs	r0, #100	; 0x64
 800081c:	f000 fe90 	bl	8001540 <setTimer4>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000826:	4854      	ldr	r0, [pc, #336]	; (8000978 <main+0x314>)
 8000828:	f001 fa5d 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4851      	ldr	r0, [pc, #324]	; (8000978 <main+0x314>)
 8000834:	f001 fa57 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	484f      	ldr	r0, [pc, #316]	; (800097c <main+0x318>)
 8000840:	f001 fa51 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084a:	484c      	ldr	r0, [pc, #304]	; (800097c <main+0x318>)
 800084c:	f001 fa4b 	bl	8001ce6 <HAL_GPIO_WritePin>
		}
		if (trafficlightred == trafficlightgreen + trafficlightyellow)
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	69ba      	ldr	r2, [r7, #24]
 8000858:	429a      	cmp	r2, r3
 800085a:	d10b      	bne.n	8000874 <main+0x210>
		{
			if (timerflag0 == 1)
 800085c:	4b49      	ldr	r3, [pc, #292]	; (8000984 <main+0x320>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d10c      	bne.n	800087e <main+0x21a>
			{
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000864:	2101      	movs	r1, #1
 8000866:	4844      	ldr	r0, [pc, #272]	; (8000978 <main+0x314>)
 8000868:	f001 fa55 	bl	8001d16 <HAL_GPIO_TogglePin>
				setTimer0(100);
 800086c:	2064      	movs	r0, #100	; 0x64
 800086e:	f000 fdaf 	bl	80013d0 <setTimer0>
 8000872:	e004      	b.n	800087e <main+0x21a>
			}
		}
		else 
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	483f      	ldr	r0, [pc, #252]	; (8000978 <main+0x314>)
 800087a:	f001 fa34 	bl	8001ce6 <HAL_GPIO_WritePin>
		}
		switch(status1)
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2b03      	cmp	r3, #3
 8000882:	d043      	beq.n	800090c <main+0x2a8>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b03      	cmp	r3, #3
 8000888:	dc5d      	bgt.n	8000946 <main+0x2e2>
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d003      	beq.n	8000898 <main+0x234>
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d01d      	beq.n	80008d2 <main+0x26e>
 8000896:	e056      	b.n	8000946 <main+0x2e2>
		{
			case 1:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	2102      	movs	r1, #2
 800089c:	4836      	ldr	r0, [pc, #216]	; (8000978 <main+0x314>)
 800089e:	f001 fa22 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2104      	movs	r1, #4
 80008a6:	4834      	ldr	r0, [pc, #208]	; (8000978 <main+0x314>)
 80008a8:	f001 fa1d 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2108      	movs	r1, #8
 80008b0:	4831      	ldr	r0, [pc, #196]	; (8000978 <main+0x314>)
 80008b2:	f001 fa18 	bl	8001ce6 <HAL_GPIO_WritePin>
				if (timerflag1 == 1)
 80008b6:	4b34      	ldr	r3, [pc, #208]	; (8000988 <main+0x324>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d153      	bne.n	8000966 <main+0x302>
				{
					setTimer1(trafficlightgreen*100);
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	2264      	movs	r2, #100	; 0x64
 80008c2:	fb02 f303 	mul.w	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fdb0 	bl	800142c <setTimer1>
					status1 = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
				}
				break;
 80008d0:	e049      	b.n	8000966 <main+0x302>
			case 2:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2102      	movs	r1, #2
 80008d6:	4828      	ldr	r0, [pc, #160]	; (8000978 <main+0x314>)
 80008d8:	f001 fa05 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2104      	movs	r1, #4
 80008e0:	4825      	ldr	r0, [pc, #148]	; (8000978 <main+0x314>)
 80008e2:	f001 fa00 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2108      	movs	r1, #8
 80008ea:	4823      	ldr	r0, [pc, #140]	; (8000978 <main+0x314>)
 80008ec:	f001 f9fb 	bl	8001ce6 <HAL_GPIO_WritePin>
				if (timerflag1 == 1)
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <main+0x324>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d138      	bne.n	800096a <main+0x306>
				{
					setTimer1(trafficlightyellow*100);
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	2264      	movs	r2, #100	; 0x64
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	4618      	mov	r0, r3
 8000902:	f000 fd93 	bl	800142c <setTimer1>
					status1 = 3;
 8000906:	2303      	movs	r3, #3
 8000908:	60fb      	str	r3, [r7, #12]
				}
				break;
 800090a:	e02e      	b.n	800096a <main+0x306>
			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2102      	movs	r1, #2
 8000910:	4819      	ldr	r0, [pc, #100]	; (8000978 <main+0x314>)
 8000912:	f001 f9e8 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	2104      	movs	r1, #4
 800091a:	4817      	ldr	r0, [pc, #92]	; (8000978 <main+0x314>)
 800091c:	f001 f9e3 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2108      	movs	r1, #8
 8000924:	4814      	ldr	r0, [pc, #80]	; (8000978 <main+0x314>)
 8000926:	f001 f9de 	bl	8001ce6 <HAL_GPIO_WritePin>
				if (timerflag1 == 1)
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <main+0x324>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d12c      	bne.n	800098c <main+0x328>
				{
					setTimer1(trafficlightred*100);
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2264      	movs	r2, #100	; 0x64
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fd76 	bl	800142c <setTimer1>
					status1 = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
				}
				break;
 8000944:	e022      	b.n	800098c <main+0x328>
			default:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	2102      	movs	r1, #2
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <main+0x314>)
 800094c:	f001 f9cb 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	2104      	movs	r1, #4
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <main+0x314>)
 8000956:	f001 f9c6 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800095a:	2201      	movs	r2, #1
 800095c:	2108      	movs	r1, #8
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <main+0x314>)
 8000960:	f001 f9c1 	bl	8001ce6 <HAL_GPIO_WritePin>
				break;
 8000964:	e013      	b.n	800098e <main+0x32a>
				break;
 8000966:	bf00      	nop
 8000968:	e011      	b.n	800098e <main+0x32a>
				break;
 800096a:	bf00      	nop
 800096c:	e00f      	b.n	800098e <main+0x32a>
 800096e:	bf00      	nop
 8000970:	2000009c 	.word	0x2000009c
 8000974:	66666667 	.word	0x66666667
 8000978:	40010800 	.word	0x40010800
 800097c:	40010c00 	.word	0x40010c00
 8000980:	20000064 	.word	0x20000064
 8000984:	20000078 	.word	0x20000078
 8000988:	20000080 	.word	0x20000080
				break;
 800098c:	bf00      	nop
		}
		switch(status2)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b03      	cmp	r3, #3
 8000992:	d043      	beq.n	8000a1c <main+0x3b8>
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	2b03      	cmp	r3, #3
 8000998:	dc5d      	bgt.n	8000a56 <main+0x3f2>
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d003      	beq.n	80009a8 <main+0x344>
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d01d      	beq.n	80009e2 <main+0x37e>
 80009a6:	e056      	b.n	8000a56 <main+0x3f2>
		{
			case 1:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2110      	movs	r1, #16
 80009ac:	4834      	ldr	r0, [pc, #208]	; (8000a80 <main+0x41c>)
 80009ae:	f001 f99a 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2120      	movs	r1, #32
 80009b6:	4832      	ldr	r0, [pc, #200]	; (8000a80 <main+0x41c>)
 80009b8:	f001 f995 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	482f      	ldr	r0, [pc, #188]	; (8000a80 <main+0x41c>)
 80009c2:	f001 f990 	bl	8001ce6 <HAL_GPIO_WritePin>
				if (timerflag2 == 1)
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <main+0x420>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d153      	bne.n	8000a76 <main+0x412>
				{
					setTimer2(trafficlightgreen*100);
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	fb02 f303 	mul.w	r3, r2, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fd56 	bl	8001488 <setTimer2>
					status2 = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	60bb      	str	r3, [r7, #8]
				}
				break;
 80009e0:	e049      	b.n	8000a76 <main+0x412>
			case 2:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2110      	movs	r1, #16
 80009e6:	4826      	ldr	r0, [pc, #152]	; (8000a80 <main+0x41c>)
 80009e8:	f001 f97d 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2120      	movs	r1, #32
 80009f0:	4823      	ldr	r0, [pc, #140]	; (8000a80 <main+0x41c>)
 80009f2:	f001 f978 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	4821      	ldr	r0, [pc, #132]	; (8000a80 <main+0x41c>)
 80009fc:	f001 f973 	bl	8001ce6 <HAL_GPIO_WritePin>
				if (timerflag2 == 1)
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <main+0x420>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d138      	bne.n	8000a7a <main+0x416>
				{
					setTimer2(trafficlightyellow*100);
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	2264      	movs	r2, #100	; 0x64
 8000a0c:	fb02 f303 	mul.w	r3, r2, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fd39 	bl	8001488 <setTimer2>
					status2 = 3;
 8000a16:	2303      	movs	r3, #3
 8000a18:	60bb      	str	r3, [r7, #8]
				}
				break;
 8000a1a:	e02e      	b.n	8000a7a <main+0x416>
			case 3:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2110      	movs	r1, #16
 8000a20:	4817      	ldr	r0, [pc, #92]	; (8000a80 <main+0x41c>)
 8000a22:	f001 f960 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <main+0x41c>)
 8000a2c:	f001 f95b 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4812      	ldr	r0, [pc, #72]	; (8000a80 <main+0x41c>)
 8000a36:	f001 f956 	bl	8001ce6 <HAL_GPIO_WritePin>
				if (timerflag2 == 1)
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <main+0x420>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d122      	bne.n	8000a88 <main+0x424>
				{
					setTimer2(trafficlightred*100);
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	fb02 f303 	mul.w	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fd1c 	bl	8001488 <setTimer2>
					status2 = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
				}
				break;
 8000a54:	e018      	b.n	8000a88 <main+0x424>
			default:
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2110      	movs	r1, #16
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <main+0x41c>)
 8000a5c:	f001 f943 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2120      	movs	r1, #32
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <main+0x41c>)
 8000a66:	f001 f93e 	bl	8001ce6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <main+0x41c>)
 8000a70:	f001 f939 	bl	8001ce6 <HAL_GPIO_WritePin>
				break;
 8000a74:	e009      	b.n	8000a8a <main+0x426>
				break;
 8000a76:	bf00      	nop
 8000a78:	e007      	b.n	8000a8a <main+0x426>
				break;
 8000a7a:	bf00      	nop
 8000a7c:	e005      	b.n	8000a8a <main+0x426>
 8000a7e:	bf00      	nop
 8000a80:	40010800 	.word	0x40010800
 8000a84:	20000088 	.word	0x20000088
				break;
 8000a88:	bf00      	nop
		}
		if (timerflag3 == 1)
 8000a8a:	4bb6      	ldr	r3, [pc, #728]	; (8000d64 <main+0x700>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d16e      	bne.n	8000b70 <main+0x50c>
		{	
			value7A--;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3b01      	subs	r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
			if (value7A == 0)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d111      	bne.n	8000ac2 <main+0x45e>
			{
				sevenledsetA(value7A%10);
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4bb1      	ldr	r3, [pc, #708]	; (8000d68 <main+0x704>)
 8000aa2:	fb83 1302 	smull	r1, r3, r3, r2
 8000aa6:	1099      	asrs	r1, r3, #2
 8000aa8:	17d3      	asrs	r3, r2, #31
 8000aaa:	1ac9      	subs	r1, r1, r3
 8000aac:	460b      	mov	r3, r1
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	1ad1      	subs	r1, r2, r3
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	f7ff fb48 	bl	800014c <sevenledsetA>
				setTimer3(20);
 8000abc:	2014      	movs	r0, #20
 8000abe:	f000 fd11 	bl	80014e4 <setTimer3>
			}
			if (value7A > 0)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dd11      	ble.n	8000aec <main+0x488>
			{
				sevenledsetA(value7A%10);
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4ba7      	ldr	r3, [pc, #668]	; (8000d68 <main+0x704>)
 8000acc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ad0:	1099      	asrs	r1, r3, #2
 8000ad2:	17d3      	asrs	r3, r2, #31
 8000ad4:	1ac9      	subs	r1, r1, r3
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	440b      	add	r3, r1
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	1ad1      	subs	r1, r2, r3
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	f7ff fb33 	bl	800014c <sevenledsetA>
				setTimer3(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f000 fcfc 	bl	80014e4 <setTimer3>
			}
			if (value7A < 0)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da3e      	bge.n	8000b70 <main+0x50c>
			{
				if (status1 == 2) {value7A = trafficlightgreen; sevenledsetA(value7A%10);}
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d110      	bne.n	8000b1a <main+0x4b6>
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	4b9a      	ldr	r3, [pc, #616]	; (8000d68 <main+0x704>)
 8000b00:	fb83 1302 	smull	r1, r3, r3, r2
 8000b04:	1099      	asrs	r1, r3, #2
 8000b06:	17d3      	asrs	r3, r2, #31
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	440b      	add	r3, r1
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	1ad1      	subs	r1, r2, r3
 8000b14:	4608      	mov	r0, r1
 8000b16:	f7ff fb19 	bl	800014c <sevenledsetA>
				if (status1 == 3) {value7A = trafficlightyellow; sevenledsetA(value7A%10);}
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d110      	bne.n	8000b42 <main+0x4de>
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	4b90      	ldr	r3, [pc, #576]	; (8000d68 <main+0x704>)
 8000b28:	fb83 1302 	smull	r1, r3, r3, r2
 8000b2c:	1099      	asrs	r1, r3, #2
 8000b2e:	17d3      	asrs	r3, r2, #31
 8000b30:	1ac9      	subs	r1, r1, r3
 8000b32:	460b      	mov	r3, r1
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	440b      	add	r3, r1
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	1ad1      	subs	r1, r2, r3
 8000b3c:	4608      	mov	r0, r1
 8000b3e:	f7ff fb05 	bl	800014c <sevenledsetA>
				if (status1 == 1) {value7A = trafficlightred; sevenledsetA(value7A%10);}
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d110      	bne.n	8000b6a <main+0x506>
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4b86      	ldr	r3, [pc, #536]	; (8000d68 <main+0x704>)
 8000b50:	fb83 1302 	smull	r1, r3, r3, r2
 8000b54:	1099      	asrs	r1, r3, #2
 8000b56:	17d3      	asrs	r3, r2, #31
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	440b      	add	r3, r1
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	1ad1      	subs	r1, r2, r3
 8000b64:	4608      	mov	r0, r1
 8000b66:	f7ff faf1 	bl	800014c <sevenledsetA>
				setTimer3(80);
 8000b6a:	2050      	movs	r0, #80	; 0x50
 8000b6c:	f000 fcba 	bl	80014e4 <setTimer3>
			}
		}	
		if (timerflag4 == 1)
 8000b70:	4b7e      	ldr	r3, [pc, #504]	; (8000d6c <main+0x708>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d16e      	bne.n	8000c56 <main+0x5f2>
		{	
			value7B--;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	603b      	str	r3, [r7, #0]
			if (value7B == 0)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d111      	bne.n	8000ba8 <main+0x544>
			{
				sevenledsetB(value7B%10);
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	4b78      	ldr	r3, [pc, #480]	; (8000d68 <main+0x704>)
 8000b88:	fb83 1302 	smull	r1, r3, r3, r2
 8000b8c:	1099      	asrs	r1, r3, #2
 8000b8e:	17d3      	asrs	r3, r2, #31
 8000b90:	1ac9      	subs	r1, r1, r3
 8000b92:	460b      	mov	r3, r1
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	1ad1      	subs	r1, r2, r3
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	f7ff fb85 	bl	80002ac <sevenledsetB>
				setTimer4(20);
 8000ba2:	2014      	movs	r0, #20
 8000ba4:	f000 fccc 	bl	8001540 <setTimer4>
			}
			if (value7B > 0)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	dd11      	ble.n	8000bd2 <main+0x56e>
			{
				sevenledsetB(value7B%10);
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4b6d      	ldr	r3, [pc, #436]	; (8000d68 <main+0x704>)
 8000bb2:	fb83 1302 	smull	r1, r3, r3, r2
 8000bb6:	1099      	asrs	r1, r3, #2
 8000bb8:	17d3      	asrs	r3, r2, #31
 8000bba:	1ac9      	subs	r1, r1, r3
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	1ad1      	subs	r1, r2, r3
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	f7ff fb70 	bl	80002ac <sevenledsetB>
				setTimer4(100);
 8000bcc:	2064      	movs	r0, #100	; 0x64
 8000bce:	f000 fcb7 	bl	8001540 <setTimer4>
			}
			if (value7B < 0)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	da3e      	bge.n	8000c56 <main+0x5f2>
			{
				if (status2 == 2) {value7B = trafficlightgreen; sevenledsetB(value7B%10);}
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d110      	bne.n	8000c00 <main+0x59c>
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <main+0x704>)
 8000be6:	fb83 1302 	smull	r1, r3, r3, r2
 8000bea:	1099      	asrs	r1, r3, #2
 8000bec:	17d3      	asrs	r3, r2, #31
 8000bee:	1ac9      	subs	r1, r1, r3
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	1ad1      	subs	r1, r2, r3
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	f7ff fb56 	bl	80002ac <sevenledsetB>
				if (status2 == 3) {value7B = trafficlightyellow; sevenledsetB(value7B%10);}
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d110      	bne.n	8000c28 <main+0x5c4>
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <main+0x704>)
 8000c0e:	fb83 1302 	smull	r1, r3, r3, r2
 8000c12:	1099      	asrs	r1, r3, #2
 8000c14:	17d3      	asrs	r3, r2, #31
 8000c16:	1ac9      	subs	r1, r1, r3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad1      	subs	r1, r2, r3
 8000c22:	4608      	mov	r0, r1
 8000c24:	f7ff fb42 	bl	80002ac <sevenledsetB>
				if (status2 == 1) {value7B = trafficlightred; sevenledsetB(value7B%10);}
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d110      	bne.n	8000c50 <main+0x5ec>
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <main+0x704>)
 8000c36:	fb83 1302 	smull	r1, r3, r3, r2
 8000c3a:	1099      	asrs	r1, r3, #2
 8000c3c:	17d3      	asrs	r3, r2, #31
 8000c3e:	1ac9      	subs	r1, r1, r3
 8000c40:	460b      	mov	r3, r1
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	1ad1      	subs	r1, r2, r3
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	f7ff fb2e 	bl	80002ac <sevenledsetB>
				setTimer4(80);
 8000c50:	2050      	movs	r0, #80	; 0x50
 8000c52:	f000 fc75 	bl	8001540 <setTimer4>
			}
		}
	}
	if (mode == 2)
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	f040 80da 	bne.w	8000e12 <main+0x7ae>
	{
		if (OnStartUp2)
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d05b      	beq.n	8000d1c <main+0x6b8>
		{
			OnStartUp2 = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	4840      	ldr	r0, [pc, #256]	; (8000d70 <main+0x70c>)
 8000c6e:	f001 f83a 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2102      	movs	r1, #2
 8000c76:	483e      	ldr	r0, [pc, #248]	; (8000d70 <main+0x70c>)
 8000c78:	f001 f835 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2104      	movs	r1, #4
 8000c80:	483b      	ldr	r0, [pc, #236]	; (8000d70 <main+0x70c>)
 8000c82:	f001 f830 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2108      	movs	r1, #8
 8000c8a:	4839      	ldr	r0, [pc, #228]	; (8000d70 <main+0x70c>)
 8000c8c:	f001 f82b 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	4836      	ldr	r0, [pc, #216]	; (8000d70 <main+0x70c>)
 8000c96:	f001 f826 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	4834      	ldr	r0, [pc, #208]	; (8000d70 <main+0x70c>)
 8000ca0:	f001 f821 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	4831      	ldr	r0, [pc, #196]	; (8000d70 <main+0x70c>)
 8000caa:	f001 f81c 	bl	8001ce6 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb4:	482e      	ldr	r0, [pc, #184]	; (8000d70 <main+0x70c>)
 8000cb6:	f001 f816 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc0:	482b      	ldr	r0, [pc, #172]	; (8000d70 <main+0x70c>)
 8000cc2:	f001 f810 	bl	8001ce6 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ccc:	4829      	ldr	r0, [pc, #164]	; (8000d74 <main+0x710>)
 8000cce:	f001 f80a 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cd8:	4826      	ldr	r0, [pc, #152]	; (8000d74 <main+0x710>)
 8000cda:	f001 f804 	bl	8001ce6 <HAL_GPIO_WritePin>
			
			tempvalue = trafficlightred;
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
			sevenledsetA(tempvalue%10);
 8000ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <main+0x704>)
 8000ce6:	fb83 1302 	smull	r1, r3, r3, r2
 8000cea:	1099      	asrs	r1, r3, #2
 8000cec:	17d3      	asrs	r3, r2, #31
 8000cee:	1ac9      	subs	r1, r1, r3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	1ad1      	subs	r1, r2, r3
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	f7ff fa26 	bl	800014c <sevenledsetA>
			ledswitchingflag = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
			sevenledsetB(2);
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff fad1 	bl	80002ac <sevenledsetB>
			setTimer0(50);
 8000d0a:	2032      	movs	r0, #50	; 0x32
 8000d0c:	f000 fb60 	bl	80013d0 <setTimer0>
			setTimer1(25);
 8000d10:	2019      	movs	r0, #25
 8000d12:	f000 fb8b 	bl	800142c <setTimer1>
			setTimer2(50);
 8000d16:	2032      	movs	r0, #50	; 0x32
 8000d18:	f000 fbb6 	bl	8001488 <setTimer2>
		}
		if (timerflag0 == 1)
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <main+0x714>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10a      	bne.n	8000d3a <main+0x6d6>
		{
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000d24:	2102      	movs	r1, #2
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <main+0x70c>)
 8000d28:	f000 fff5 	bl	8001d16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	4810      	ldr	r0, [pc, #64]	; (8000d70 <main+0x70c>)
 8000d30:	f000 fff1 	bl	8001d16 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
			setTimer0(50);
 8000d34:	2032      	movs	r0, #50	; 0x32
 8000d36:	f000 fb4b 	bl	80013d0 <setTimer0>
		}
		if (timerflag1 == 1)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <main+0x718>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d13c      	bne.n	8000dbc <main+0x758>
		{
			if (ledswitchingflag == 0) 
 8000d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d11b      	bne.n	8000d80 <main+0x71c>
			{
				ledswitchingflag = 1;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue/10);
 8000d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <main+0x704>)
 8000d50:	fb82 1203 	smull	r1, r2, r2, r3
 8000d54:	1092      	asrs	r2, r2, #2
 8000d56:	17db      	asrs	r3, r3, #31
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff f9f6 	bl	800014c <sevenledsetA>
 8000d60:	e01f      	b.n	8000da2 <main+0x73e>
 8000d62:	bf00      	nop
 8000d64:	20000090 	.word	0x20000090
 8000d68:	66666667 	.word	0x66666667
 8000d6c:	20000098 	.word	0x20000098
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	20000078 	.word	0x20000078
 8000d7c:	20000080 	.word	0x20000080
			}
			else
			{
				ledswitchingflag = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue%10);
 8000d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d86:	4b66      	ldr	r3, [pc, #408]	; (8000f20 <main+0x8bc>)
 8000d88:	fb83 1302 	smull	r1, r3, r3, r2
 8000d8c:	1099      	asrs	r1, r3, #2
 8000d8e:	17d3      	asrs	r3, r2, #31
 8000d90:	1ac9      	subs	r1, r1, r3
 8000d92:	460b      	mov	r3, r1
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	440b      	add	r3, r1
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	1ad1      	subs	r1, r2, r3
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	f7ff f9d5 	bl	800014c <sevenledsetA>
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8000da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da6:	485f      	ldr	r0, [pc, #380]	; (8000f24 <main+0x8c0>)
 8000da8:	f000 ffb5 	bl	8001d16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db0:	485c      	ldr	r0, [pc, #368]	; (8000f24 <main+0x8c0>)
 8000db2:	f000 ffb0 	bl	8001d16 <HAL_GPIO_TogglePin>
			setTimer1(25);
 8000db6:	2019      	movs	r0, #25
 8000db8:	f000 fb38 	bl	800142c <setTimer1>
		}
		if (button1_trigger == 1)
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <main+0x8c4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10a      	bne.n	8000dda <main+0x776>
		{
			button1_trigger = 0;
 8000dc4:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <main+0x8c4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
			tempvalue++;
 8000dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dcc:	3301      	adds	r3, #1
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
			if (tempvalue >= 100)
 8000dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd2:	2b63      	cmp	r3, #99	; 0x63
 8000dd4:	dd01      	ble.n	8000dda <main+0x776>
			{
				tempvalue = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}
		if (button1_trigger_long == 1)
 8000dda:	4b54      	ldr	r3, [pc, #336]	; (8000f2c <main+0x8c8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d10e      	bne.n	8000e00 <main+0x79c>
		{
			if (timerflag2 == 1)
 8000de2:	4b53      	ldr	r3, [pc, #332]	; (8000f30 <main+0x8cc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d10a      	bne.n	8000e00 <main+0x79c>
			{
				tempvalue++;
 8000dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dec:	3301      	adds	r3, #1
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
				if (tempvalue >= 100)
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	2b63      	cmp	r3, #99	; 0x63
 8000df4:	dd01      	ble.n	8000dfa <main+0x796>
				{
					tempvalue = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
				}
				setTimer2(50);
 8000dfa:	2032      	movs	r0, #50	; 0x32
 8000dfc:	f000 fb44 	bl	8001488 <setTimer2>
			}
		}
		if (button2_trigger == 1)
 8000e00:	4b4c      	ldr	r3, [pc, #304]	; (8000f34 <main+0x8d0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d104      	bne.n	8000e12 <main+0x7ae>
		{
			button2_trigger = 0;
 8000e08:	4b4a      	ldr	r3, [pc, #296]	; (8000f34 <main+0x8d0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
			trafficlightred = tempvalue;
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	61bb      	str	r3, [r7, #24]
		}
	}
	if (mode == 3)
 8000e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	f040 80de 	bne.w	8000fd6 <main+0x972>
	{
		if (OnStartUp3)
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d05b      	beq.n	8000ed8 <main+0x874>
		{
			OnStartUp3 = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2101      	movs	r1, #1
 8000e28:	483e      	ldr	r0, [pc, #248]	; (8000f24 <main+0x8c0>)
 8000e2a:	f000 ff5c 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2102      	movs	r1, #2
 8000e32:	483c      	ldr	r0, [pc, #240]	; (8000f24 <main+0x8c0>)
 8000e34:	f000 ff57 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4839      	ldr	r0, [pc, #228]	; (8000f24 <main+0x8c0>)
 8000e3e:	f000 ff52 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2108      	movs	r1, #8
 8000e46:	4837      	ldr	r0, [pc, #220]	; (8000f24 <main+0x8c0>)
 8000e48:	f000 ff4d 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2110      	movs	r1, #16
 8000e50:	4834      	ldr	r0, [pc, #208]	; (8000f24 <main+0x8c0>)
 8000e52:	f000 ff48 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2120      	movs	r1, #32
 8000e5a:	4832      	ldr	r0, [pc, #200]	; (8000f24 <main+0x8c0>)
 8000e5c:	f000 ff43 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	482f      	ldr	r0, [pc, #188]	; (8000f24 <main+0x8c0>)
 8000e66:	f000 ff3e 	bl	8001ce6 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 1);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e70:	482c      	ldr	r0, [pc, #176]	; (8000f24 <main+0x8c0>)
 8000e72:	f000 ff38 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7c:	4829      	ldr	r0, [pc, #164]	; (8000f24 <main+0x8c0>)
 8000e7e:	f000 ff32 	bl	8001ce6 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e88:	482b      	ldr	r0, [pc, #172]	; (8000f38 <main+0x8d4>)
 8000e8a:	f000 ff2c 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e94:	4828      	ldr	r0, [pc, #160]	; (8000f38 <main+0x8d4>)
 8000e96:	f000 ff26 	bl	8001ce6 <HAL_GPIO_WritePin>
			
			tempvalue = trafficlightyellow;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
			sevenledsetA(tempvalue%10);
 8000e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <main+0x8bc>)
 8000ea2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ea6:	1099      	asrs	r1, r3, #2
 8000ea8:	17d3      	asrs	r3, r2, #31
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	460b      	mov	r3, r1
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	1ad1      	subs	r1, r2, r3
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	f7ff f948 	bl	800014c <sevenledsetA>
			ledswitchingflag = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
			sevenledsetB(3);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f7ff f9f3 	bl	80002ac <sevenledsetB>
			setTimer0(50);
 8000ec6:	2032      	movs	r0, #50	; 0x32
 8000ec8:	f000 fa82 	bl	80013d0 <setTimer0>
			setTimer1(25);
 8000ecc:	2019      	movs	r0, #25
 8000ece:	f000 faad 	bl	800142c <setTimer1>
			setTimer2(50);
 8000ed2:	2032      	movs	r0, #50	; 0x32
 8000ed4:	f000 fad8 	bl	8001488 <setTimer2>
		}
		if (timerflag0 == 1)
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <main+0x8d8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d10a      	bne.n	8000ef6 <main+0x892>
		{
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4810      	ldr	r0, [pc, #64]	; (8000f24 <main+0x8c0>)
 8000ee4:	f000 ff17 	bl	8001d16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ee8:	2120      	movs	r1, #32
 8000eea:	480e      	ldr	r0, [pc, #56]	; (8000f24 <main+0x8c0>)
 8000eec:	f000 ff13 	bl	8001d16 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
			setTimer0(50);
 8000ef0:	2032      	movs	r0, #50	; 0x32
 8000ef2:	f000 fa6d 	bl	80013d0 <setTimer0>
		}
		if (timerflag1 == 1)
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <main+0x8dc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d140      	bne.n	8000f80 <main+0x91c>
		{
			if (ledswitchingflag == 0) 
 8000efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11f      	bne.n	8000f44 <main+0x8e0>
			{
				ledswitchingflag = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue/10);
 8000f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <main+0x8bc>)
 8000f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f10:	1092      	asrs	r2, r2, #2
 8000f12:	17db      	asrs	r3, r3, #31
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff f918 	bl	800014c <sevenledsetA>
 8000f1c:	e023      	b.n	8000f66 <main+0x902>
 8000f1e:	bf00      	nop
 8000f20:	66666667 	.word	0x66666667
 8000f24:	40010800 	.word	0x40010800
 8000f28:	20000068 	.word	0x20000068
 8000f2c:	2000006c 	.word	0x2000006c
 8000f30:	20000088 	.word	0x20000088
 8000f34:	20000070 	.word	0x20000070
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	20000078 	.word	0x20000078
 8000f40:	20000080 	.word	0x20000080
			}
			else
			{
				ledswitchingflag = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue%10);
 8000f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f4a:	4b8c      	ldr	r3, [pc, #560]	; (800117c <main+0xb18>)
 8000f4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f50:	1099      	asrs	r1, r3, #2
 8000f52:	17d3      	asrs	r3, r2, #31
 8000f54:	1ac9      	subs	r1, r1, r3
 8000f56:	460b      	mov	r3, r1
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	1ad1      	subs	r1, r2, r3
 8000f60:	4608      	mov	r0, r1
 8000f62:	f7ff f8f3 	bl	800014c <sevenledsetA>
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8000f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6a:	4885      	ldr	r0, [pc, #532]	; (8001180 <main+0xb1c>)
 8000f6c:	f000 fed3 	bl	8001d16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8000f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f74:	4882      	ldr	r0, [pc, #520]	; (8001180 <main+0xb1c>)
 8000f76:	f000 fece 	bl	8001d16 <HAL_GPIO_TogglePin>
			setTimer1(25);
 8000f7a:	2019      	movs	r0, #25
 8000f7c:	f000 fa56 	bl	800142c <setTimer1>
		}
		if (button1_trigger == 1)
 8000f80:	4b80      	ldr	r3, [pc, #512]	; (8001184 <main+0xb20>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d10a      	bne.n	8000f9e <main+0x93a>
		{
			button1_trigger = 0;
 8000f88:	4b7e      	ldr	r3, [pc, #504]	; (8001184 <main+0xb20>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
			tempvalue++;
 8000f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f90:	3301      	adds	r3, #1
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
			if (tempvalue >= 100)
 8000f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f96:	2b63      	cmp	r3, #99	; 0x63
 8000f98:	dd01      	ble.n	8000f9e <main+0x93a>
			{
				tempvalue = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}
		if (button1_trigger_long == 1)
 8000f9e:	4b7a      	ldr	r3, [pc, #488]	; (8001188 <main+0xb24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10e      	bne.n	8000fc4 <main+0x960>
		{
			if (timerflag2 == 1)
 8000fa6:	4b79      	ldr	r3, [pc, #484]	; (800118c <main+0xb28>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10a      	bne.n	8000fc4 <main+0x960>
			{
				tempvalue++;
 8000fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
				if (tempvalue >= 100)
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	2b63      	cmp	r3, #99	; 0x63
 8000fb8:	dd01      	ble.n	8000fbe <main+0x95a>
				{
					tempvalue = 1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
				}
				setTimer2(50);
 8000fbe:	2032      	movs	r0, #50	; 0x32
 8000fc0:	f000 fa62 	bl	8001488 <setTimer2>
			}
		}
		if (button2_trigger == 1)
 8000fc4:	4b72      	ldr	r3, [pc, #456]	; (8001190 <main+0xb2c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d104      	bne.n	8000fd6 <main+0x972>
		{
			button2_trigger = 0;
 8000fcc:	4b70      	ldr	r3, [pc, #448]	; (8001190 <main+0xb2c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
			trafficlightyellow = tempvalue;
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd4:	617b      	str	r3, [r7, #20]
		}
	}
	if (mode == 4)
 8000fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	f47f abb8 	bne.w	800074e <main+0xea>
	{
		if (OnStartUp4)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d05b      	beq.n	800109c <main+0xa38>
		{
			OnStartUp4 = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2101      	movs	r1, #1
 8000fec:	4864      	ldr	r0, [pc, #400]	; (8001180 <main+0xb1c>)
 8000fee:	f000 fe7a 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4862      	ldr	r0, [pc, #392]	; (8001180 <main+0xb1c>)
 8000ff8:	f000 fe75 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2104      	movs	r1, #4
 8001000:	485f      	ldr	r0, [pc, #380]	; (8001180 <main+0xb1c>)
 8001002:	f000 fe70 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001006:	2201      	movs	r2, #1
 8001008:	2108      	movs	r1, #8
 800100a:	485d      	ldr	r0, [pc, #372]	; (8001180 <main+0xb1c>)
 800100c:	f000 fe6b 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2110      	movs	r1, #16
 8001014:	485a      	ldr	r0, [pc, #360]	; (8001180 <main+0xb1c>)
 8001016:	f000 fe66 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2120      	movs	r1, #32
 800101e:	4858      	ldr	r0, [pc, #352]	; (8001180 <main+0xb1c>)
 8001020:	f000 fe61 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001024:	2201      	movs	r2, #1
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4855      	ldr	r0, [pc, #340]	; (8001180 <main+0xb1c>)
 800102a:	f000 fe5c 	bl	8001ce6 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001034:	4852      	ldr	r0, [pc, #328]	; (8001180 <main+0xb1c>)
 8001036:	f000 fe56 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	484f      	ldr	r0, [pc, #316]	; (8001180 <main+0xb1c>)
 8001042:	f000 fe50 	bl	8001ce6 <HAL_GPIO_WritePin>
			
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104c:	4851      	ldr	r0, [pc, #324]	; (8001194 <main+0xb30>)
 800104e:	f000 fe4a 	bl	8001ce6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001058:	484e      	ldr	r0, [pc, #312]	; (8001194 <main+0xb30>)
 800105a:	f000 fe44 	bl	8001ce6 <HAL_GPIO_WritePin>
			
			tempvalue = trafficlightgreen;
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
			sevenledsetA(tempvalue%10);
 8001062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001064:	4b45      	ldr	r3, [pc, #276]	; (800117c <main+0xb18>)
 8001066:	fb83 1302 	smull	r1, r3, r3, r2
 800106a:	1099      	asrs	r1, r3, #2
 800106c:	17d3      	asrs	r3, r2, #31
 800106e:	1ac9      	subs	r1, r1, r3
 8001070:	460b      	mov	r3, r1
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	1ad1      	subs	r1, r2, r3
 800107a:	4608      	mov	r0, r1
 800107c:	f7ff f866 	bl	800014c <sevenledsetA>
			ledswitchingflag = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
			sevenledsetB(4);
 8001084:	2004      	movs	r0, #4
 8001086:	f7ff f911 	bl	80002ac <sevenledsetB>
			setTimer0(50);
 800108a:	2032      	movs	r0, #50	; 0x32
 800108c:	f000 f9a0 	bl	80013d0 <setTimer0>
			setTimer1(25);
 8001090:	2019      	movs	r0, #25
 8001092:	f000 f9cb 	bl	800142c <setTimer1>
			setTimer2(50);
 8001096:	2032      	movs	r0, #50	; 0x32
 8001098:	f000 f9f6 	bl	8001488 <setTimer2>
		}
		if (timerflag0 == 1)
 800109c:	4b3e      	ldr	r3, [pc, #248]	; (8001198 <main+0xb34>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10a      	bne.n	80010ba <main+0xa56>
		{
			//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80010a4:	2108      	movs	r1, #8
 80010a6:	4836      	ldr	r0, [pc, #216]	; (8001180 <main+0xb1c>)
 80010a8:	f000 fe35 	bl	8001d16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80010ac:	2140      	movs	r1, #64	; 0x40
 80010ae:	4834      	ldr	r0, [pc, #208]	; (8001180 <main+0xb1c>)
 80010b0:	f000 fe31 	bl	8001d16 <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
			setTimer0(50);
 80010b4:	2032      	movs	r0, #50	; 0x32
 80010b6:	f000 f98b 	bl	80013d0 <setTimer0>
		}
		if (timerflag1 == 1)
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <main+0xb38>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d12d      	bne.n	800111e <main+0xaba>
		{
			if (ledswitchingflag == 0) 
 80010c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10c      	bne.n	80010e2 <main+0xa7e>
			{
				ledswitchingflag = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue/10);
 80010cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ce:	4a2b      	ldr	r2, [pc, #172]	; (800117c <main+0xb18>)
 80010d0:	fb82 1203 	smull	r1, r2, r2, r3
 80010d4:	1092      	asrs	r2, r2, #2
 80010d6:	17db      	asrs	r3, r3, #31
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f836 	bl	800014c <sevenledsetA>
 80010e0:	e010      	b.n	8001104 <main+0xaa0>
			}
			else
			{
				ledswitchingflag = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
				sevenledsetA(tempvalue%10);
 80010e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <main+0xb18>)
 80010ea:	fb83 1302 	smull	r1, r3, r3, r2
 80010ee:	1099      	asrs	r1, r3, #2
 80010f0:	17d3      	asrs	r3, r2, #31
 80010f2:	1ac9      	subs	r1, r1, r3
 80010f4:	460b      	mov	r3, r1
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	1ad1      	subs	r1, r2, r3
 80010fe:	4608      	mov	r0, r1
 8001100:	f7ff f824 	bl	800014c <sevenledsetA>
			}
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_14);
 8001104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <main+0xb1c>)
 800110a:	f000 fe04 	bl	8001d16 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 800110e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <main+0xb1c>)
 8001114:	f000 fdff 	bl	8001d16 <HAL_GPIO_TogglePin>
			setTimer1(25);
 8001118:	2019      	movs	r0, #25
 800111a:	f000 f987 	bl	800142c <setTimer1>
		}
		if (button1_trigger == 1)
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <main+0xb20>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10a      	bne.n	800113c <main+0xad8>
		{
			button1_trigger = 0;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <main+0xb20>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
			tempvalue++;
 800112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800112e:	3301      	adds	r3, #1
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
			if (tempvalue >= 100)
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	2b63      	cmp	r3, #99	; 0x63
 8001136:	dd01      	ble.n	800113c <main+0xad8>
			{
				tempvalue = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}
		if (button1_trigger_long == 1)
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <main+0xb24>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d10e      	bne.n	8001162 <main+0xafe>
		{
			if (timerflag2 == 1)
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <main+0xb28>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10a      	bne.n	8001162 <main+0xafe>
			{
				tempvalue++;
 800114c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114e:	3301      	adds	r3, #1
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
				if (tempvalue >= 100)
 8001152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001154:	2b63      	cmp	r3, #99	; 0x63
 8001156:	dd01      	ble.n	800115c <main+0xaf8>
				{
					tempvalue = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
				}
				setTimer2(50);
 800115c:	2032      	movs	r0, #50	; 0x32
 800115e:	f000 f993 	bl	8001488 <setTimer2>
			}
		}
		if (button2_trigger == 1)
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <main+0xb2c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	f47f aaf1 	bne.w	800074e <main+0xea>
		{
			button2_trigger = 0;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <main+0xb2c>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
			trafficlightgreen = tempvalue;
 8001172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001174:	613b      	str	r3, [r7, #16]
	if (button0_trigger == 1)
 8001176:	f7ff baea 	b.w	800074e <main+0xea>
 800117a:	bf00      	nop
 800117c:	66666667 	.word	0x66666667
 8001180:	40010800 	.word	0x40010800
 8001184:	20000068 	.word	0x20000068
 8001188:	2000006c 	.word	0x2000006c
 800118c:	20000088 	.word	0x20000088
 8001190:	20000070 	.word	0x20000070
 8001194:	40010c00 	.word	0x40010c00
 8001198:	20000078 	.word	0x20000078
 800119c:	20000080 	.word	0x20000080

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b090      	sub	sp, #64	; 0x40
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0318 	add.w	r3, r7, #24
 80011aa:	2228      	movs	r2, #40	; 0x28
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fdb2 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c2:	2302      	movs	r3, #2
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ca:	2310      	movs	r3, #16
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fdb6 	bl	8001d48 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011e2:	f000 f8ef 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 f822 	bl	8002248 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800120a:	f000 f8db 	bl	80013c4 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3740      	adds	r7, #64	; 0x40
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_TIM2_Init+0x94>)
 8001236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <MX_TIM2_Init+0x94>)
 800123e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001242:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_TIM2_Init+0x94>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_TIM2_Init+0x94>)
 800124c:	2209      	movs	r2, #9
 800124e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_TIM2_Init+0x94>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_TIM2_Init+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125c:	4813      	ldr	r0, [pc, #76]	; (80012ac <MX_TIM2_Init+0x94>)
 800125e:	f001 f94f 	bl	8002500 <HAL_TIM_Base_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001268:	f000 f8ac 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <MX_TIM2_Init+0x94>)
 800127a:	f001 fae5 	bl	8002848 <HAL_TIM_ConfigClockSource>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001284:	f000 f89e 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_TIM2_Init+0x94>)
 8001296:	f001 fcb1 	bl	8002bfc <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012a0:	f000 f890 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000009c 	.word	0x2000009c

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <MX_GPIO_Init+0xd4>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a2e      	ldr	r2, [pc, #184]	; (8001384 <MX_GPIO_Init+0xd4>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <MX_GPIO_Init+0xd4>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <MX_GPIO_Init+0xd4>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a28      	ldr	r2, [pc, #160]	; (8001384 <MX_GPIO_Init+0xd4>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <MX_GPIO_Init+0xd4>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_GPIO_Init+0xd4>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a22      	ldr	r2, [pc, #136]	; (8001384 <MX_GPIO_Init+0xd4>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_GPIO_Init+0xd4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800130c:	2200      	movs	r2, #0
 800130e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001312:	481d      	ldr	r0, [pc, #116]	; (8001388 <MX_GPIO_Init+0xd8>)
 8001314:	f000 fce7 	bl	8001ce6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001318:	2200      	movs	r2, #0
 800131a:	f64f 7180 	movw	r1, #65408	; 0xff80
 800131e:	481b      	ldr	r0, [pc, #108]	; (800138c <MX_GPIO_Init+0xdc>)
 8001320:	f000 fce1 	bl	8001ce6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001324:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	4815      	ldr	r0, [pc, #84]	; (8001390 <MX_GPIO_Init+0xe0>)
 800133a:	f000 fb43 	bl	80019c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800133e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001342:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2302      	movs	r3, #2
 800134e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_GPIO_Init+0xd8>)
 8001358:	f000 fb34 	bl	80019c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800135c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001360:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2302      	movs	r3, #2
 800136c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_GPIO_Init+0xdc>)
 8001376:	f000 fb25 	bl	80019c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	40010800 	.word	0x40010800
 800138c:	40010c00 	.word	0x40010c00
 8001390:	40011000 	.word	0x40011000

08001394 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	runTimer0();
 800139c:	f000 f82c 	bl	80013f8 <runTimer0>
	runTimer1();
 80013a0:	f000 f858 	bl	8001454 <runTimer1>
	runTimer2();
 80013a4:	f000 f884 	bl	80014b0 <runTimer2>
	runTimer3();
 80013a8:	f000 f8b0 	bl	800150c <runTimer3>
	runTimer4();
 80013ac:	f000 f8dc 	bl	8001568 <runTimer4>
	GetkeyInput0();
 80013b0:	f7ff f838 	bl	8000424 <GetkeyInput0>
	GetkeyInput1();
 80013b4:	f7ff f89c 	bl	80004f0 <GetkeyInput1>
	GetkeyInput2();
 80013b8:	f7ff f906 	bl	80005c8 <GetkeyInput2>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <setTimer0>:
#include "softwaretimer.h"
int timercounter0 = 0;
int timerflag0 = 0;

void setTimer0(int duration)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	timercounter0 = duration;
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <setTimer0+0x20>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
	timerflag0 = 0;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <setTimer0+0x24>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000074 	.word	0x20000074
 80013f4:	20000078 	.word	0x20000078

080013f8 <runTimer0>:

void runTimer0()
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	if (timercounter0 > 0)
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <runTimer0+0x2c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	dd0b      	ble.n	800141c <runTimer0+0x24>
	{
		timercounter0--;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <runTimer0+0x2c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <runTimer0+0x2c>)
 800140c:	6013      	str	r3, [r2, #0]
		if (timercounter0 <= 0)
 800140e:	4b05      	ldr	r3, [pc, #20]	; (8001424 <runTimer0+0x2c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	dc02      	bgt.n	800141c <runTimer0+0x24>
		{
			timerflag0 = 1;
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <runTimer0+0x30>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000074 	.word	0x20000074
 8001428:	20000078 	.word	0x20000078

0800142c <setTimer1>:

int timercounter1 = 0;
int timerflag1 = 0;

void setTimer1(int duration)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	timercounter1 = duration;
 8001434:	4a05      	ldr	r2, [pc, #20]	; (800144c <setTimer1+0x20>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
	timerflag1 = 0;
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <setTimer1+0x24>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	2000007c 	.word	0x2000007c
 8001450:	20000080 	.word	0x20000080

08001454 <runTimer1>:

void runTimer1()
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	if (timercounter1 > 0)
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <runTimer1+0x2c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	dd0b      	ble.n	8001478 <runTimer1+0x24>
	{
		timercounter1--;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <runTimer1+0x2c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	3b01      	subs	r3, #1
 8001466:	4a06      	ldr	r2, [pc, #24]	; (8001480 <runTimer1+0x2c>)
 8001468:	6013      	str	r3, [r2, #0]
		if (timercounter1 <= 0)
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <runTimer1+0x2c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	dc02      	bgt.n	8001478 <runTimer1+0x24>
		{
			timerflag1 = 1;
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <runTimer1+0x30>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	2000007c 	.word	0x2000007c
 8001484:	20000080 	.word	0x20000080

08001488 <setTimer2>:

int timercounter2 = 0;
int timerflag2 = 0;

void setTimer2(int duration)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	timercounter2 = duration;
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <setTimer2+0x20>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
	timerflag2 = 0;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <setTimer2+0x24>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000084 	.word	0x20000084
 80014ac:	20000088 	.word	0x20000088

080014b0 <runTimer2>:

void runTimer2()
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	if (timercounter2 > 0)
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <runTimer2+0x2c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	dd0b      	ble.n	80014d4 <runTimer2+0x24>
	{
		timercounter2--;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <runTimer2+0x2c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	4a06      	ldr	r2, [pc, #24]	; (80014dc <runTimer2+0x2c>)
 80014c4:	6013      	str	r3, [r2, #0]
		if (timercounter2 <= 0)
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <runTimer2+0x2c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	dc02      	bgt.n	80014d4 <runTimer2+0x24>
		{
			timerflag2 = 1;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <runTimer2+0x30>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000084 	.word	0x20000084
 80014e0:	20000088 	.word	0x20000088

080014e4 <setTimer3>:

int timercounter3 = 0;
int timerflag3 = 0;

void setTimer3(int duration)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	timercounter3 = duration;
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <setTimer3+0x20>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
	timerflag3 = 0;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <setTimer3+0x24>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2000008c 	.word	0x2000008c
 8001508:	20000090 	.word	0x20000090

0800150c <runTimer3>:

void runTimer3()
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	if (timercounter3 > 0)
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <runTimer3+0x2c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	dd0b      	ble.n	8001530 <runTimer3+0x24>
	{
		timercounter3--;
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <runTimer3+0x2c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3b01      	subs	r3, #1
 800151e:	4a06      	ldr	r2, [pc, #24]	; (8001538 <runTimer3+0x2c>)
 8001520:	6013      	str	r3, [r2, #0]
		if (timercounter3 <= 0)
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <runTimer3+0x2c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dc02      	bgt.n	8001530 <runTimer3+0x24>
		{
			timerflag3 = 1;
 800152a:	4b04      	ldr	r3, [pc, #16]	; (800153c <runTimer3+0x30>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	2000008c 	.word	0x2000008c
 800153c:	20000090 	.word	0x20000090

08001540 <setTimer4>:

int timercounter4 = 0;
int timerflag4 = 0;

void setTimer4(int duration)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	timercounter4 = duration;
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <setTimer4+0x20>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
	timerflag4 = 0;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <setTimer4+0x24>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000094 	.word	0x20000094
 8001564:	20000098 	.word	0x20000098

08001568 <runTimer4>:

void runTimer4()
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
	if (timercounter4 > 0)
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <runTimer4+0x2c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	dd0b      	ble.n	800158c <runTimer4+0x24>
	{
		timercounter4--;
 8001574:	4b07      	ldr	r3, [pc, #28]	; (8001594 <runTimer4+0x2c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	4a06      	ldr	r2, [pc, #24]	; (8001594 <runTimer4+0x2c>)
 800157c:	6013      	str	r3, [r2, #0]
		if (timercounter4 <= 0)
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <runTimer4+0x2c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	dc02      	bgt.n	800158c <runTimer4+0x24>
		{
			timerflag4 = 1;
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <runTimer4+0x30>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000094 	.word	0x20000094
 8001598:	20000098 	.word	0x20000098

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_MspInit+0x40>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <HAL_MspInit+0x40>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <HAL_MspInit+0x40>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_MspInit+0x40>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <HAL_MspInit+0x40>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_MspInit+0x40>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d113      	bne.n	800161a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_TIM_Base_MspInit+0x44>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_TIM_Base_MspInit+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_TIM_Base_MspInit+0x44>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	201c      	movs	r0, #28
 8001610:	f000 f9a1 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001614:	201c      	movs	r0, #28
 8001616:	f000 f9ba 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f000 f87f 	bl	8001770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <TIM2_IRQHandler+0x10>)
 800167e:	f000 ffdb 	bl	8002638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000009c 	.word	0x2000009c

0800168c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001698:	f7ff fff8 	bl	800168c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800169e:	490c      	ldr	r1, [pc, #48]	; (80016d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016a0:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016b4:	4c09      	ldr	r4, [pc, #36]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c2:	f001 fb05 	bl	8002cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7fe ffcd 	bl	8000664 <main>
  bx lr
 80016ca:	4770      	bx	lr
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80016d4:	08002d6c 	.word	0x08002d6c
  ldr r2, =_sbss
 80016d8:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80016dc:	200000e8 	.word	0x200000e8

080016e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC1_2_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <HAL_Init+0x28>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <HAL_Init+0x28>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f4:	2003      	movs	r0, #3
 80016f6:	f000 f923 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fa:	200f      	movs	r0, #15
 80016fc:	f000 f808 	bl	8001710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001700:	f7ff ff4c 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40022000 	.word	0x40022000

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x54>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x58>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001726:	fbb3 f3f1 	udiv	r3, r3, r1
 800172a:	fbb2 f3f3 	udiv	r3, r2, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f93b 	bl	80019aa <HAL_SYSTICK_Config>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e00e      	b.n	800175c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d80a      	bhi.n	800175a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f000 f903 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001750:	4a06      	ldr	r2, [pc, #24]	; (800176c <HAL_InitTick+0x5c>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000003c 	.word	0x2000003c
 8001768:	20000044 	.word	0x20000044
 800176c:	20000040 	.word	0x20000040

08001770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_IncTick+0x1c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_IncTick+0x20>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4413      	add	r3, r2
 8001780:	4a03      	ldr	r2, [pc, #12]	; (8001790 <HAL_IncTick+0x20>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	20000044 	.word	0x20000044
 8001790:	200000e4 	.word	0x200000e4

08001794 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <HAL_GetTick+0x10>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	200000e4 	.word	0x200000e4

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4906      	ldr	r1, [pc, #24]	; (8001840 <__NVIC_EnableIRQ+0x34>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff90 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff2d 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff42 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff90 	bl	8001898 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5f 	bl	8001844 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff35 	bl	800180c <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffa2 	bl	80018fc <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b08b      	sub	sp, #44	; 0x2c
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d6:	e148      	b.n	8001c6a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d8:	2201      	movs	r2, #1
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 8137 	bne.w	8001c64 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4aa3      	ldr	r2, [pc, #652]	; (8001c88 <HAL_GPIO_Init+0x2c4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d05e      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a00:	4aa1      	ldr	r2, [pc, #644]	; (8001c88 <HAL_GPIO_Init+0x2c4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d875      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a06:	4aa1      	ldr	r2, [pc, #644]	; (8001c8c <HAL_GPIO_Init+0x2c8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d058      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a0c:	4a9f      	ldr	r2, [pc, #636]	; (8001c8c <HAL_GPIO_Init+0x2c8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d86f      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a12:	4a9f      	ldr	r2, [pc, #636]	; (8001c90 <HAL_GPIO_Init+0x2cc>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d052      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a18:	4a9d      	ldr	r2, [pc, #628]	; (8001c90 <HAL_GPIO_Init+0x2cc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d869      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a1e:	4a9d      	ldr	r2, [pc, #628]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d04c      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a24:	4a9b      	ldr	r2, [pc, #620]	; (8001c94 <HAL_GPIO_Init+0x2d0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d863      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a2a:	4a9b      	ldr	r2, [pc, #620]	; (8001c98 <HAL_GPIO_Init+0x2d4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d046      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
 8001a30:	4a99      	ldr	r2, [pc, #612]	; (8001c98 <HAL_GPIO_Init+0x2d4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d85d      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d82a      	bhi.n	8001a90 <HAL_GPIO_Init+0xcc>
 8001a3a:	2b12      	cmp	r3, #18
 8001a3c:	d859      	bhi.n	8001af2 <HAL_GPIO_Init+0x12e>
 8001a3e:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <HAL_GPIO_Init+0x80>)
 8001a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a44:	08001abf 	.word	0x08001abf
 8001a48:	08001a99 	.word	0x08001a99
 8001a4c:	08001aab 	.word	0x08001aab
 8001a50:	08001aed 	.word	0x08001aed
 8001a54:	08001af3 	.word	0x08001af3
 8001a58:	08001af3 	.word	0x08001af3
 8001a5c:	08001af3 	.word	0x08001af3
 8001a60:	08001af3 	.word	0x08001af3
 8001a64:	08001af3 	.word	0x08001af3
 8001a68:	08001af3 	.word	0x08001af3
 8001a6c:	08001af3 	.word	0x08001af3
 8001a70:	08001af3 	.word	0x08001af3
 8001a74:	08001af3 	.word	0x08001af3
 8001a78:	08001af3 	.word	0x08001af3
 8001a7c:	08001af3 	.word	0x08001af3
 8001a80:	08001af3 	.word	0x08001af3
 8001a84:	08001af3 	.word	0x08001af3
 8001a88:	08001aa1 	.word	0x08001aa1
 8001a8c:	08001ab5 	.word	0x08001ab5
 8001a90:	4a82      	ldr	r2, [pc, #520]	; (8001c9c <HAL_GPIO_Init+0x2d8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a96:	e02c      	b.n	8001af2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	623b      	str	r3, [r7, #32]
          break;
 8001a9e:	e029      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	e024      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	3308      	adds	r3, #8
 8001ab0:	623b      	str	r3, [r7, #32]
          break;
 8001ab2:	e01f      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	330c      	adds	r3, #12
 8001aba:	623b      	str	r3, [r7, #32]
          break;
 8001abc:	e01a      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e013      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d105      	bne.n	8001ae0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	611a      	str	r2, [r3, #16]
          break;
 8001ade:	e009      	b.n	8001af4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69fa      	ldr	r2, [r7, #28]
 8001ae8:	615a      	str	r2, [r3, #20]
          break;
 8001aea:	e003      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
          break;
 8001af0:	e000      	b.n	8001af4 <HAL_GPIO_Init+0x130>
          break;
 8001af2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	2bff      	cmp	r3, #255	; 0xff
 8001af8:	d801      	bhi.n	8001afe <HAL_GPIO_Init+0x13a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	e001      	b.n	8001b02 <HAL_GPIO_Init+0x13e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3304      	adds	r3, #4
 8001b02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2bff      	cmp	r3, #255	; 0xff
 8001b08:	d802      	bhi.n	8001b10 <HAL_GPIO_Init+0x14c>
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	e002      	b.n	8001b16 <HAL_GPIO_Init+0x152>
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	3b08      	subs	r3, #8
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	6a39      	ldr	r1, [r7, #32]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	431a      	orrs	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8090 	beq.w	8001c64 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b44:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <HAL_GPIO_Init+0x2dc>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4a55      	ldr	r2, [pc, #340]	; (8001ca0 <HAL_GPIO_Init+0x2dc>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6193      	str	r3, [r2, #24]
 8001b50:	4b53      	ldr	r3, [pc, #332]	; (8001ca0 <HAL_GPIO_Init+0x2dc>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b5c:	4a51      	ldr	r2, [pc, #324]	; (8001ca4 <HAL_GPIO_Init+0x2e0>)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <HAL_GPIO_Init+0x2e4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00d      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2e8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x1dc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2ec>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_Init+0x1d8>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e004      	b.n	8001ba6 <HAL_GPIO_Init+0x1e2>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x1e2>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_GPIO_Init+0x1e2>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba8:	f002 0203 	and.w	r2, r2, #3
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bb6:	493b      	ldr	r1, [pc, #236]	; (8001ca4 <HAL_GPIO_Init+0x2e0>)
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd0:	4b38      	ldr	r3, [pc, #224]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4937      	ldr	r1, [pc, #220]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bde:	4b35      	ldr	r3, [pc, #212]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4933      	ldr	r1, [pc, #204]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	492d      	ldr	r1, [pc, #180]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4929      	ldr	r1, [pc, #164]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4923      	ldr	r1, [pc, #140]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	491f      	ldr	r1, [pc, #124]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4919      	ldr	r1, [pc, #100]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4915      	ldr	r1, [pc, #84]	; (8001cb4 <HAL_GPIO_Init+0x2f0>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	3301      	adds	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f47f aeaf 	bne.w	80019d8 <HAL_GPIO_Init+0x14>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	372c      	adds	r7, #44	; 0x2c
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	10320000 	.word	0x10320000
 8001c8c:	10310000 	.word	0x10310000
 8001c90:	10220000 	.word	0x10220000
 8001c94:	10210000 	.word	0x10210000
 8001c98:	10120000 	.word	0x10120000
 8001c9c:	10110000 	.word	0x10110000
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	40010c00 	.word	0x40010c00
 8001cb0:	40011000 	.word	0x40011000
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e001      	b.n	8001cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	807b      	strh	r3, [r7, #2]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cf6:	787b      	ldrb	r3, [r7, #1]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfc:	887a      	ldrh	r2, [r7, #2]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d02:	e003      	b.n	8001d0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	041a      	lsls	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	611a      	str	r2, [r3, #16]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	460b      	mov	r3, r1
 8001d20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d28:	887a      	ldrh	r2, [r7, #2]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	041a      	lsls	r2, r3, #16
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	400b      	ands	r3, r1
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	611a      	str	r2, [r3, #16]
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e26c      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d00c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d74:	4b8f      	ldr	r3, [pc, #572]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d112      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
 8001d80:	4b8c      	ldr	r3, [pc, #560]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b89      	ldr	r3, [pc, #548]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d06c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x12c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d168      	bne.n	8001e74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e246      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x76>
 8001db0:	4b80      	ldr	r3, [pc, #512]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a7f      	ldr	r2, [pc, #508]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e02e      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x98>
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7a      	ldr	r2, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b78      	ldr	r3, [pc, #480]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a77      	ldr	r2, [pc, #476]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0xbc>
 8001dea:	4b72      	ldr	r3, [pc, #456]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a71      	ldr	r2, [pc, #452]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xd4>
 8001e04:	4b6b      	ldr	r3, [pc, #428]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b68      	ldr	r3, [pc, #416]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a67      	ldr	r2, [pc, #412]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fcb6 	bl	8001794 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fcb2 	bl	8001794 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1fa      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe4>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fca2 	bl	8001794 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff fc9e 	bl	8001794 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1e6      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x10c>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1ba      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4939      	ldr	r1, [pc, #228]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fc57 	bl	8001794 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff fc53 	bl	8001794 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e19b      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4927      	ldr	r1, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCC_OscConfig+0x270>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fc36 	bl	8001794 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7ff fc32 	bl	8001794 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e17a      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03a      	beq.n	8001fcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7ff fc16 	bl	8001794 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fc12 	bl	8001794 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e15a      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 fa9a 	bl	80024c4 <RCC_Delay>
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_OscConfig+0x274>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff fbfc 	bl	8001794 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9e:	e00f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fbf8 	bl	8001794 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e140      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	42420000 	.word	0x42420000
 8001fbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	4b9e      	ldr	r3, [pc, #632]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e9      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a6 	beq.w	8002126 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fde:	4b97      	ldr	r3, [pc, #604]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10d      	bne.n	8002006 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b94      	ldr	r3, [pc, #592]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a93      	ldr	r2, [pc, #588]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
 8001ff6:	4b91      	ldr	r3, [pc, #580]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b8e      	ldr	r3, [pc, #568]	; (8002240 <HAL_RCC_OscConfig+0x4f8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	4b8b      	ldr	r3, [pc, #556]	; (8002240 <HAL_RCC_OscConfig+0x4f8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a8a      	ldr	r2, [pc, #552]	; (8002240 <HAL_RCC_OscConfig+0x4f8>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7ff fbb9 	bl	8001794 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7ff fbb5 	bl	8001794 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	; 0x64
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0fd      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	4b81      	ldr	r3, [pc, #516]	; (8002240 <HAL_RCC_OscConfig+0x4f8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x312>
 800204c:	4b7b      	ldr	r3, [pc, #492]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a7a      	ldr	r2, [pc, #488]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e02d      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x334>
 8002062:	4b76      	ldr	r3, [pc, #472]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a75      	ldr	r2, [pc, #468]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b73      	ldr	r3, [pc, #460]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a72      	ldr	r2, [pc, #456]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	e01c      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x356>
 8002084:	4b6d      	ldr	r3, [pc, #436]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a6c      	ldr	r2, [pc, #432]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b6a      	ldr	r3, [pc, #424]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a69      	ldr	r2, [pc, #420]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x36e>
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a66      	ldr	r2, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b64      	ldr	r3, [pc, #400]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a63      	ldr	r2, [pc, #396]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d015      	beq.n	80020ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff fb69 	bl	8001794 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7ff fb65 	bl	8001794 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0ab      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020dc:	4b57      	ldr	r3, [pc, #348]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ee      	beq.n	80020c6 <HAL_RCC_OscConfig+0x37e>
 80020e8:	e014      	b.n	8002114 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ea:	f7ff fb53 	bl	8001794 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7ff fb4f 	bl	8001794 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e095      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	4b4c      	ldr	r3, [pc, #304]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ee      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d105      	bne.n	8002126 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211a:	4b48      	ldr	r3, [pc, #288]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a47      	ldr	r2, [pc, #284]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8081 	beq.w	8002232 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d061      	beq.n	8002200 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b02      	cmp	r3, #2
 8002142:	d146      	bne.n	80021d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <HAL_RCC_OscConfig+0x4fc>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff fb23 	bl	8001794 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff fb1f 	bl	8001794 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e067      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d108      	bne.n	800218c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800217a:	4b30      	ldr	r3, [pc, #192]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	492d      	ldr	r1, [pc, #180]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a19      	ldr	r1, [r3, #32]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	430b      	orrs	r3, r1
 800219e:	4927      	ldr	r1, [pc, #156]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x4fc>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7ff faf3 	bl	8001794 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b2:	f7ff faef 	bl	8001794 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e037      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_OscConfig+0x46a>
 80021d0:	e02f      	b.n	8002232 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <HAL_RCC_OscConfig+0x4fc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff fadc 	bl	8001794 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fad8 	bl	8001794 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e020      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x498>
 80021fe:	e018      	b.n	8002232 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e013      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_OscConfig+0x4f4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	429a      	cmp	r2, r3
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	40007000 	.word	0x40007000
 8002244:	42420060 	.word	0x42420060

08002248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0d0      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4965      	ldr	r1, [pc, #404]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b8      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a4:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a58      	ldr	r2, [pc, #352]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c8:	4b50      	ldr	r3, [pc, #320]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	494d      	ldr	r1, [pc, #308]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d040      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d115      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e07f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e073      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06b      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4936      	ldr	r1, [pc, #216]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff fa2c 	bl	8001794 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff fa28 	bl	8001794 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e053      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d210      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	4922      	ldr	r1, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e032      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4916      	ldr	r1, [pc, #88]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023d6:	f000 f821 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	490a      	ldr	r1, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x1cc>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1d0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff f98a 	bl	8001710 <HAL_InitTick>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	40021000 	.word	0x40021000
 8002410:	08002d40 	.word	0x08002d40
 8002414:	2000003c 	.word	0x2000003c
 8002418:	20000040 	.word	0x20000040

0800241c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b04      	cmp	r3, #4
 8002444:	d002      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x30>
 8002446:	2b08      	cmp	r3, #8
 8002448:	d003      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x36>
 800244a:	e027      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800244e:	613b      	str	r3, [r7, #16]
      break;
 8002450:	e027      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	0c9b      	lsrs	r3, r3, #18
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
 800245e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d010      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	0c5b      	lsrs	r3, r3, #17
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	4a11      	ldr	r2, [pc, #68]	; (80024bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002476:	5cd3      	ldrb	r3, [r2, r3]
 8002478:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800247e:	fb02 f203 	mul.w	r2, r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e004      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a0c      	ldr	r2, [pc, #48]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	613b      	str	r3, [r7, #16]
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800249e:	613b      	str	r3, [r7, #16]
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	693b      	ldr	r3, [r7, #16]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	007a1200 	.word	0x007a1200
 80024b8:	08002d50 	.word	0x08002d50
 80024bc:	08002d60 	.word	0x08002d60
 80024c0:	003d0900 	.word	0x003d0900

080024c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <RCC_Delay+0x34>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <RCC_Delay+0x38>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0a5b      	lsrs	r3, r3, #9
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e0:	bf00      	nop
  }
  while (Delay --);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1e5a      	subs	r2, r3, #1
 80024e6:	60fa      	str	r2, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f9      	bne.n	80024e0 <RCC_Delay+0x1c>
}
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	2000003c 	.word	0x2000003c
 80024fc:	10624dd3 	.word	0x10624dd3

08002500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e041      	b.n	8002596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff f85a 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3304      	adds	r3, #4
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f000 fa6e 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d001      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e035      	b.n	8002624 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a16      	ldr	r2, [pc, #88]	; (8002630 <HAL_TIM_Base_Start_IT+0x90>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_TIM_Base_Start_IT+0x4e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d004      	beq.n	80025ee <HAL_TIM_Base_Start_IT+0x4e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_TIM_Base_Start_IT+0x94>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d111      	bne.n	8002612 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d010      	beq.n	8002622 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002610:	e007      	b.n	8002622 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40012c00 	.word	0x40012c00
 8002634:	40000400 	.word	0x40000400

08002638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d122      	bne.n	8002694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d11b      	bne.n	8002694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0202 	mvn.w	r2, #2
 8002664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f9b4 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 8002680:	e005      	b.n	800268e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f9a7 	bl	80029d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f9b6 	bl	80029fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d122      	bne.n	80026e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d11b      	bne.n	80026e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0204 	mvn.w	r2, #4
 80026b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f98a 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f97d 	bl	80029d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f98c 	bl	80029fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d122      	bne.n	800273c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b08      	cmp	r3, #8
 8002702:	d11b      	bne.n	800273c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0208 	mvn.w	r2, #8
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2204      	movs	r2, #4
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f960 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f953 	bl	80029d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f962 	bl	80029fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b10      	cmp	r3, #16
 8002748:	d122      	bne.n	8002790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b10      	cmp	r3, #16
 8002756:	d11b      	bne.n	8002790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0210 	mvn.w	r2, #16
 8002760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2208      	movs	r2, #8
 8002766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f936 	bl	80029e8 <HAL_TIM_IC_CaptureCallback>
 800277c:	e005      	b.n	800278a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f929 	bl	80029d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f938 	bl	80029fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10e      	bne.n	80027bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d107      	bne.n	80027bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0201 	mvn.w	r2, #1
 80027b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe fdec 	bl	8001394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d10e      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d4:	2b80      	cmp	r3, #128	; 0x80
 80027d6:	d107      	bne.n	80027e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fa6b 	bl	8002cbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d107      	bne.n	8002814 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8fc 	bl	8002a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b20      	cmp	r3, #32
 8002820:	d10e      	bne.n	8002840 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b20      	cmp	r3, #32
 800282e:	d107      	bne.n	8002840 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0220 	mvn.w	r2, #32
 8002838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fa36 	bl	8002cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_TIM_ConfigClockSource+0x1c>
 8002860:	2302      	movs	r3, #2
 8002862:	e0b4      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x186>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800288a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289c:	d03e      	beq.n	800291c <HAL_TIM_ConfigClockSource+0xd4>
 800289e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a2:	f200 8087 	bhi.w	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028aa:	f000 8086 	beq.w	80029ba <HAL_TIM_ConfigClockSource+0x172>
 80028ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028b2:	d87f      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b70      	cmp	r3, #112	; 0x70
 80028b6:	d01a      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0xa6>
 80028b8:	2b70      	cmp	r3, #112	; 0x70
 80028ba:	d87b      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d050      	beq.n	8002962 <HAL_TIM_ConfigClockSource+0x11a>
 80028c0:	2b60      	cmp	r3, #96	; 0x60
 80028c2:	d877      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028c4:	2b50      	cmp	r3, #80	; 0x50
 80028c6:	d03c      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0xfa>
 80028c8:	2b50      	cmp	r3, #80	; 0x50
 80028ca:	d873      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d058      	beq.n	8002982 <HAL_TIM_ConfigClockSource+0x13a>
 80028d0:	2b40      	cmp	r3, #64	; 0x40
 80028d2:	d86f      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028d4:	2b30      	cmp	r3, #48	; 0x30
 80028d6:	d064      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x15a>
 80028d8:	2b30      	cmp	r3, #48	; 0x30
 80028da:	d86b      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d060      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x15a>
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d867      	bhi.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05c      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x15a>
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d05a      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x15a>
 80028ec:	e062      	b.n	80029b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6899      	ldr	r1, [r3, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f000 f95e 	bl	8002bbe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	609a      	str	r2, [r3, #8]
      break;
 800291a:	e04f      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f000 f947 	bl	8002bbe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800293e:	609a      	str	r2, [r3, #8]
      break;
 8002940:	e03c      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6859      	ldr	r1, [r3, #4]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	461a      	mov	r2, r3
 8002950:	f000 f8be 	bl	8002ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2150      	movs	r1, #80	; 0x50
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f915 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 8002960:	e02c      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6859      	ldr	r1, [r3, #4]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	461a      	mov	r2, r3
 8002970:	f000 f8dc 	bl	8002b2c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2160      	movs	r1, #96	; 0x60
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f905 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 8002980:	e01c      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	461a      	mov	r2, r3
 8002990:	f000 f89e 	bl	8002ad0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f8f5 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 80029a0:	e00c      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f000 f8ec 	bl	8002b8a <TIM_ITRx_SetConfig>
      break;
 80029b2:	e003      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e000      	b.n	80029bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr
	...

08002a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <TIM_Base_SetConfig+0xa8>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d007      	beq.n	8002a48 <TIM_Base_SetConfig+0x28>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d003      	beq.n	8002a48 <TIM_Base_SetConfig+0x28>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a22      	ldr	r2, [pc, #136]	; (8002acc <TIM_Base_SetConfig+0xac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d108      	bne.n	8002a5a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <TIM_Base_SetConfig+0xa8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <TIM_Base_SetConfig+0x52>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d003      	beq.n	8002a72 <TIM_Base_SetConfig+0x52>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a17      	ldr	r2, [pc, #92]	; (8002acc <TIM_Base_SetConfig+0xac>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <TIM_Base_SetConfig+0xa8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d103      	bne.n	8002ab8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	615a      	str	r2, [r3, #20]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40000400 	.word	0x40000400

08002ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f023 0201 	bic.w	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f023 030a 	bic.w	r3, r3, #10
 8002b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f023 0210 	bic.w	r2, r3, #16
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	031b      	lsls	r3, r3, #12
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	621a      	str	r2, [r3, #32]
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f043 0307 	orr.w	r3, r3, #7
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr

08002bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b087      	sub	sp, #28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	021a      	lsls	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	609a      	str	r2, [r3, #8]
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e041      	b.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d009      	beq.n	8002c6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d004      	beq.n	8002c6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10c      	bne.n	8002c86 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400

08002cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <__libc_init_array>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	2600      	movs	r6, #0
 8002cd4:	4d0c      	ldr	r5, [pc, #48]	; (8002d08 <__libc_init_array+0x38>)
 8002cd6:	4c0d      	ldr	r4, [pc, #52]	; (8002d0c <__libc_init_array+0x3c>)
 8002cd8:	1b64      	subs	r4, r4, r5
 8002cda:	10a4      	asrs	r4, r4, #2
 8002cdc:	42a6      	cmp	r6, r4
 8002cde:	d109      	bne.n	8002cf4 <__libc_init_array+0x24>
 8002ce0:	f000 f822 	bl	8002d28 <_init>
 8002ce4:	2600      	movs	r6, #0
 8002ce6:	4d0a      	ldr	r5, [pc, #40]	; (8002d10 <__libc_init_array+0x40>)
 8002ce8:	4c0a      	ldr	r4, [pc, #40]	; (8002d14 <__libc_init_array+0x44>)
 8002cea:	1b64      	subs	r4, r4, r5
 8002cec:	10a4      	asrs	r4, r4, #2
 8002cee:	42a6      	cmp	r6, r4
 8002cf0:	d105      	bne.n	8002cfe <__libc_init_array+0x2e>
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
 8002cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf8:	4798      	blx	r3
 8002cfa:	3601      	adds	r6, #1
 8002cfc:	e7ee      	b.n	8002cdc <__libc_init_array+0xc>
 8002cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d02:	4798      	blx	r3
 8002d04:	3601      	adds	r6, #1
 8002d06:	e7f2      	b.n	8002cee <__libc_init_array+0x1e>
 8002d08:	08002d64 	.word	0x08002d64
 8002d0c:	08002d64 	.word	0x08002d64
 8002d10:	08002d64 	.word	0x08002d64
 8002d14:	08002d68 	.word	0x08002d68

08002d18 <memset>:
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4402      	add	r2, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	f803 1b01 	strb.w	r1, [r3], #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <_init>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	bf00      	nop
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr

08002d34 <_fini>:
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d36:	bf00      	nop
 8002d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3a:	bc08      	pop	{r3}
 8002d3c:	469e      	mov	lr, r3
 8002d3e:	4770      	bx	lr
